<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>在VSCode上使用Remix</title>
    <url>/2021/12/05/Remix-On-Vscode/</url>
    <content><![CDATA[<h1 id="在VSCode上使用Remix"><a href="#在VSCode上使用Remix" class="headerlink" title="在VSCode上使用Remix"></a>在VSCode上使用Remix</h1><p>搜尋remix<br><img data-src="/2021/12/05/Remix-On-Vscode/unknown_filename.1.png"><br><img data-src="/2021/12/05/Remix-On-Vscode/unknown_filename.png"><br>並安裝</p>
<hr>
<p>根據前面那篇我們改使用Remix來測試: <a href="https://fufushih.github.io/2021/11/30/Solidity-Hello-World/">Solidity: Hello World</a><br>(我們首先要開啟本地的測試網路，ganache-cli)<br><img data-src="/2021/12/05/Remix-On-Vscode/unknown_filename.2.png"></p>
<p><img data-src="/2021/12/05/Remix-On-Vscode/unknown_filename.4.png"></p>
<p>我們使用ganache啟動了本地測試網路，並且監聽port是在8545<br><img data-src="/2021/12/05/Remix-On-Vscode/unknown_filename.3.png"></p>
<p>所以，改成8545並connect<br><img data-src="/2021/12/05/Remix-On-Vscode/unknown_filename.5.png"><br>compile合約<br><img data-src="/2021/12/05/Remix-On-Vscode/unknown_filename.6.png"><br>並佈署到測試網上，deploy<br><img data-src="/2021/12/05/Remix-On-Vscode/unknown_filename.7.png"></p>
<p>我們來測試，到run並call我們的sayHello()<br><img data-src="/2021/12/05/Remix-On-Vscode/unknown_filename.8.png"></p>
<p>最後，我們從output上來看<br><img data-src="/2021/12/05/Remix-On-Vscode/unknown_filename.9.png"></p>
<p>…</p>
]]></content>
      <categories>
        <category>solidity</category>
      </categories>
      <tags>
        <tag>vscode</tag>
        <tag>remix</tag>
        <tag>solidity</tag>
      </tags>
  </entry>
  <entry>
    <title>Solidity: Hello World</title>
    <url>/2021/11/30/SolidityHelloWorld/</url>
    <content><![CDATA[<h1 id="Solidity-Hello-World"><a href="#Solidity-Hello-World" class="headerlink" title="Solidity: Hello World"></a>Solidity: Hello World</h1><p>開發工具與環境設置</p>
<p>安裝所需要工具</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g truffle ganache-cli</span><br></pre></td></tr></table></figure>

<p>啟動 ganache-cli來啟動乙太坊測試環境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ganache-cli</span><br></pre></td></tr></table></figure>

<p><img data-src="/2021/11/30/SolidityHelloWorld/unknown_filename.png"><br><img data-src="/2021/11/30/SolidityHelloWorld/unknown_filename.1.png"></p>
<p>建立智能合約</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir hello</span><br><span class="line">cd hello</span><br><span class="line">truffle init</span><br><span class="line"></span><br><span class="line">truffle create contract HelloWorld #建立合約</span><br></pre></td></tr></table></figure>

<p><img data-src="/2021/11/30/SolidityHelloWorld/unknown_filename.2.png"></p>
<p><img data-src="/2021/11/30/SolidityHelloWorld/unknown_filename.3.png"><br>HelloWorld.sol:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity &gt;=0.4.22 &lt;0.9.0;</span><br><span class="line"></span><br><span class="line">contract HelloWorld &#123;</span><br><span class="line">  // constructor() public &#123;</span><br><span class="line">  // &#125;</span><br><span class="line"></span><br><span class="line">  function sayHello() public pure returns (string memory)&#123;</span><br><span class="line">    return (&quot;Hello World&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>編譯</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">truffle compile</span><br></pre></td></tr></table></figure>

<p>編譯成功的話，在build/contracts/目錄下會多出HelloWorld.json這個檔案<br><img data-src="/2021/11/30/SolidityHelloWorld/unknown_filename.4.png"></p>
<p>部署</p>
<p>在migrate中新增2_deploy_contracts.js<br>(migration檔案會依照檔案的編號來執行。例如2_就會在1_之後執行。檔案後面的文字只為協助開發者理解之用)<br><img data-src="/2021/11/30/SolidityHelloWorld/unknown_filename.5.png"><br>2_deploy_contracts.js:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var HelloWorld = artifacts.require(&quot;HelloWorld&quot;);</span><br><span class="line"></span><br><span class="line">module.exports = function(deployer) &#123;</span><br><span class="line">  deployer.deploy(HelloWorld);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>區塊網路設定<br>在truffle-config檔案裡L<br><img data-src="/2021/11/30/SolidityHelloWorld/unknown_filename.6.png"><br>加入設定<br><img data-src="/2021/11/30/SolidityHelloWorld/unknown_filename.7.png"></p>
<p>開始部署:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">truffle migrate</span><br></pre></td></tr></table></figure>

<p><img data-src="/2021/11/30/SolidityHelloWorld/unknown_filename.8.png"></p>
<p>測試</p>
<p>使用truffle提供的命令行工具，執行:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">truffle console</span><br></pre></td></tr></table></figure>
<p>輸入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; let contract</span><br><span class="line">&gt; HelloWorld.deployed().then(instance =&gt; contract = instance)</span><br><span class="line">&gt; contract.sayHello.call()</span><br></pre></td></tr></table></figure>

<p><img data-src="/2021/11/30/SolidityHelloWorld/unknown_filename.9.png"><br><img data-src="/2021/11/30/SolidityHelloWorld/unknown_filename.10.png"><br>..</p>
<h2 id="我的名子合約"><a href="#我的名子合約" class="headerlink" title="我的名子合約"></a>我的名子合約</h2><blockquote>
<p>輸入名子，並藉由呼叫函數來顯示</p>
</blockquote>
<p>MyName.sol:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity &gt;=0.4.22 &lt;0.9.0;</span><br><span class="line"></span><br><span class="line">contract MyName &#123;</span><br><span class="line">  string public _name;</span><br><span class="line"></span><br><span class="line">  constructor() &#123;</span><br><span class="line">    _name=&quot;Please Type Your Name&quot;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function setName(string memory name) public&#123;</span><br><span class="line">    _name = name ;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function getName() public view returns (string memory)&#123;</span><br><span class="line">    return _name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>編譯並佈署後</p>
<p>我們開始測試</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">truffle console</span><br><span class="line"></span><br><span class="line">let contract</span><br><span class="line">MyName.deployed().then(instance =&gt; contract = instance)</span><br></pre></td></tr></table></figure>

<p><img data-src="/2021/11/30/SolidityHelloWorld/2021-12-03-19-11-46.png"></p>
<p>call function:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">contract.getName.call()</span><br><span class="line">contract.setName(&quot;Test Name&quot;)</span><br></pre></td></tr></table></figure>

<p><img data-src="/2021/11/30/SolidityHelloWorld/2021-12-03-19-14-18.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">contract.getName.call()</span><br></pre></td></tr></table></figure>

<p><img data-src="/2021/11/30/SolidityHelloWorld/2021-12-03-19-14-46.png"></p>
]]></content>
      <categories>
        <category>solidity</category>
      </categories>
      <tags>
        <tag>solidity</tag>
      </tags>
  </entry>
  <entry>
    <title>Solidity:創建ERC20標準代幣</title>
    <url>/2021/12/01/Solidity_%E5%89%B5%E5%BB%BAERC20%E6%A8%99%E6%BA%96%E4%BB%A3%E5%B9%A3/</url>
    <content><![CDATA[<h1 id="Solidity-創建ERC20標準代幣"><a href="#Solidity-創建ERC20標準代幣" class="headerlink" title="Solidity:創建ERC20標準代幣"></a>Solidity:創建ERC20標準代幣</h1><p>使用OpenZeppelin</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install @openzeppelin/contracts</span><br></pre></td></tr></table></figure>

<p>建立合約:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">truffle create contract MyTokenEnhance</span><br></pre></td></tr></table></figure>

<p>MyTokenEnhance.sol:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity &gt;=0.4.22 &lt;0.9.0;</span><br><span class="line">import &quot;@openzeppelin/contracts/token/ERC20/ERC20.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract MyTokenEnhance is ERC20 &#123;</span><br><span class="line">  constructor() ERC20(&quot;MyToken&quot;, &quot;MTE&quot;) &#123;</span><br><span class="line">    // Mint 100 tokens to msg.sender</span><br><span class="line">    // Similar to how</span><br><span class="line">    // 1 dollar = 100 cents</span><br><span class="line">    // 1 token = 1 * (10 ** decimals)</span><br><span class="line">    _mint(msg.sender, 100 * 10**uint(decimals()));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>add</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var HelloWorld = artifacts.require(&quot;HelloWorld&quot;);</span><br><span class="line">// var MyToken = artifacts.require(&quot;MyToken&quot;);</span><br><span class="line">var MyTokenEnhance = artifacts.require(&quot;MyTokenEnhance&quot;)</span><br><span class="line"></span><br><span class="line">module.exports = function(deployer) &#123;</span><br><span class="line">  deployer.deploy(HelloWorld);</span><br><span class="line">//   deployer.deploy(MyToken);</span><br><span class="line">  deployer.deploy(MyTokenEnhance);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><img data-src="/2021/12/01/Solidity_%E5%89%B5%E5%BB%BAERC20%E6%A8%99%E6%BA%96%E4%BB%A3%E5%B9%A3/unknown_filename.2.png"></p>
<p>run</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">truffle compile</span><br></pre></td></tr></table></figure>
<p><img data-src="/2021/12/01/Solidity_%E5%89%B5%E5%BB%BAERC20%E6%A8%99%E6%BA%96%E4%BB%A3%E5%B9%A3/unknown_filename.png"></p>
<p>and then, run</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">truffle migrate</span><br></pre></td></tr></table></figure>
<p><img data-src="/2021/12/01/Solidity_%E5%89%B5%E5%BB%BAERC20%E6%A8%99%E6%BA%96%E4%BB%A3%E5%B9%A3/unknown_filename.3.png"></p>
<p>使用console測試:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">truffle console</span><br></pre></td></tr></table></figure>

<p>Test</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let contract</span><br><span class="line">MyTokenEnhance.deployed().then(instance =&gt; contract = instance)</span><br></pre></td></tr></table></figure>
<p><img data-src="/2021/12/01/Solidity_%E5%89%B5%E5%BB%BAERC20%E6%A8%99%E6%BA%96%E4%BB%A3%E5%B9%A3/unknown_filename.1.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">contract.balanceOf(accounts[0])</span><br><span class="line">contract.balanceOf(accounts[1])</span><br></pre></td></tr></table></figure>
<p><img data-src="/2021/12/01/Solidity_%E5%89%B5%E5%BB%BAERC20%E6%A8%99%E6%BA%96%E4%BB%A3%E5%B9%A3/unknown_filename.4.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">contract.transfer(accounts[1], 50)</span><br><span class="line">contract.balanceOf(accounts[0])</span><br><span class="line">contract.balanceOf.call(accounts[1])</span><br></pre></td></tr></table></figure>
<p><img data-src="/2021/12/01/Solidity_%E5%89%B5%E5%BB%BAERC20%E6%A8%99%E6%BA%96%E4%BB%A3%E5%B9%A3/unknown_filename.5.png"><br><img data-src="/2021/12/01/Solidity_%E5%89%B5%E5%BB%BAERC20%E6%A8%99%E6%BA%96%E4%BB%A3%E5%B9%A3/unknown_filename.6.png"></p>
<p>..</p>
]]></content>
      <categories>
        <category>solidity</category>
      </categories>
      <tags>
        <tag>solidity</tag>
      </tags>
  </entry>
  <entry>
    <title>Solidity:創建簡易代幣</title>
    <url>/2021/12/01/Solidity_%E5%89%B5%E5%BB%BA%E7%B0%A1%E6%98%93%E4%BB%A3%E5%B9%A3/</url>
    <content><![CDATA[<h1 id="Solidity-創建簡易代幣"><a href="#Solidity-創建簡易代幣" class="headerlink" title="Solidity:創建簡易代幣"></a>Solidity:創建簡易代幣</h1><p>在終端輸入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">truffle create contract MyToken</span><br></pre></td></tr></table></figure>

<p>創建<br><img data-src="/2021/12/01/Solidity_%E5%89%B5%E5%BB%BA%E7%B0%A1%E6%98%93%E4%BB%A3%E5%B9%A3/unknown_filename.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity &gt;=0.4.22 &lt;0.9.0;</span><br><span class="line"></span><br><span class="line">contract MyToken &#123;</span><br><span class="line">  uint INITIAL_SUPPLY = 10000;</span><br><span class="line">  mapping(address =&gt; uint) balances;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    balances[msg.sender] = INITIAL_SUPPLY;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // transfer token for a specified address</span><br><span class="line">  function transfer(address _to, uint _amount) public &#123;</span><br><span class="line">    require(balances[msg.sender] &gt; _amount);</span><br><span class="line">    balances[msg.sender] -= _amount;</span><br><span class="line">    balances[_to] += _amount;</span><br><span class="line">  &#125;</span><br><span class="line">  // Gets the balance of the specified address</span><br><span class="line">  // Constant and Immutable State Variables. See https://docs.soliditylang.org/en/v0.8.10/contracts.html#modifiers</span><br><span class="line">  function balanceOf(address _owner) public view returns (uint) &#123;</span><br><span class="line">    return balances[_owner];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在migrations資料夾新增</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var HelloWorld = artifacts.require(&quot;HelloWorld&quot;);</span><br><span class="line">var MyToken = artifacts.require(&quot;MyToken&quot;);</span><br><span class="line"></span><br><span class="line">module.exports = function(deployer) &#123;</span><br><span class="line">  deployer.deploy(HelloWorld);</span><br><span class="line">  deployer.deploy(MyToken);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>編譯</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">truffle compile</span><br></pre></td></tr></table></figure>

<p><img data-src="/2021/12/01/Solidity_%E5%89%B5%E5%BB%BA%E7%B0%A1%E6%98%93%E4%BB%A3%E5%B9%A3/unknown_filename.1.png"></p>
<p>開始部署，Run</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">truffle migrate</span><br></pre></td></tr></table></figure>
<p><img data-src="/2021/12/01/Solidity_%E5%89%B5%E5%BB%BA%E7%B0%A1%E6%98%93%E4%BB%A3%E5%B9%A3/unknown_filename.6.png"><br><img data-src="/2021/12/01/Solidity_%E5%89%B5%E5%BB%BA%E7%B0%A1%E6%98%93%E4%BB%A3%E5%B9%A3/unknown_filename.2.png"></p>
<p>Test</p>
<p>開啟console</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">truffle console</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let contract</span><br><span class="line">MyToken.deployed().then(instance =&gt; contract = instance)</span><br></pre></td></tr></table></figure>
<p><img data-src="/2021/12/01/Solidity_%E5%89%B5%E5%BB%BA%E7%B0%A1%E6%98%93%E4%BB%A3%E5%B9%A3/unknown_filename.3.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">contract.balanceOf(accounts[0])</span><br><span class="line">contract.balanceOf(accounts[1])</span><br></pre></td></tr></table></figure>
<p><img data-src="/2021/12/01/Solidity_%E5%89%B5%E5%BB%BA%E7%B0%A1%E6%98%93%E4%BB%A3%E5%B9%A3/unknown_filename.4.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">contract.transfer(accounts[1], 123)</span><br><span class="line">contract.balanceOf(accounts[0])</span><br><span class="line">contract.balanceOf.call(accounts[1])</span><br></pre></td></tr></table></figure>

<p><img data-src="/2021/12/01/Solidity_%E5%89%B5%E5%BB%BA%E7%B0%A1%E6%98%93%E4%BB%A3%E5%B9%A3/unknown_filename.5.png"></p>
<p>…</p>
]]></content>
      <categories>
        <category>solidity</category>
      </categories>
      <tags>
        <tag>solidity</tag>
      </tags>
  </entry>
  <entry>
    <title>flutter lifecycle</title>
    <url>/2021/12/12/flutter-lifecycle/</url>
    <content><![CDATA[<h1 id="關於flutter的lifecycle"><a href="#關於flutter的lifecycle" class="headerlink" title="關於flutter的lifecycle"></a>關於flutter的lifecycle</h1><p>最近在學習有關於flutter widget中的state內交互以及生命週期。整理了一下資料並把他做成筆記。</p>
<p><img data-src="/2021/12/12/flutter-lifecycle/life-cycle.drawio.png"><br><img data-src="/2021/12/12/flutter-lifecycle/2021-12-13-10-08-39.png"></p>
<p>Flutter的三種tree</p>
<blockquote>
<p>1.Widget：UI 的不可變描述，並還描述了Element的配置</p>
<p>2.Element：在特定位置的小部件樹中的小部件實例化，並進行狀態管理</p>
<p>3.Render：處理大小、繪畫和其他低級的東西</p>
<p>Widget樹只是一個藍圖；元素樹進行比較；渲染樹​​進行實際渲染</p>
</blockquote>
<p>Flutter組件生命周期：</p>
<blockquote>
<p>1、組件實例化後添加到render tree，即Navigator.push</p>
<p>(構造函數-&gt;initState-&gt;didChangeDependencies-&gt; Widget build，此時頁面加載完成)</p>
<p>2、狀態State改變，也就是開新的widget或其依賴的上級widget發生改變</p>
<p>(didUpdateWidget-&gt;Widget build，頁面刷新)</p>
<p>3、從render tree移除，即Navigator.pop</p>
<p>(deactivate-&gt;dispose，組件移除並銷毀)</p>
</blockquote>
<p>Flutter打開和關閉widget時，都是先處理即將顯示的介面。</p>
<hr>
<p>當我們開始渲染時，最先呼叫構造函數constructor(當呼叫這個widget時就會自動調用並做初始化)</p>
<p>initState():</p>
<blockquote>
<p>將我們的widget插入到我們的渲染樹中</p>
</blockquote>
<p>didChangeDependencies()-&gt;void</p>
<blockquote>
<p>在初始化initState</p>
<p>顯示/關閉其他widget</p>
</blockquote>
<p>didUpdateWidget()-&gt;void</p>
<blockquote>
<p>上級結點rebuild widget時，即上級widget state發生變化時會觸發子widget執行此函數</p>
</blockquote>
<p>deactivate()-&gt;void</p>
<blockquote>
<p>在打開新的widget或回到這個widget時會執行。在Element Tree中，State Widget的位置發生了變化，此時需暫時移除State Widget時，才會被呼叫。例如: 頁面切換時</p>
<p>在某些情況下，框架會將 State 對象重新插入到樹的另一部分（例如，如果包含此 State 對象的子樹由於使用 GlobalKey 而從樹中的一個位置移植到另一個位置）。並調用 activate 以讓 State 對像有機會重新獲取它在停用時釋放的任何資源。然後它還會調用 build 來讓 State 對像有機會適應它在樹中的新位置。</p>
<p>如果框架確實重新插入了這個子樹，它會在從樹中刪除子樹的動畫幀結束之前這樣做。</p>
</blockquote>
<p>dispose()-&gt;void</p>
<blockquote>
<p>在執行Navigator.pop後會調用該方法，表示組建已銷毀</p>
</blockquote>
<p>activate() → void</p>
<blockquote>
<p>在通過deactivate 刪除此對像後重新插入到樹中時調用</p>
</blockquote>
<p>reassemble()-&gt;void</p>
<blockquote>
<p>在調試期間重新組裝應用程序時調用，例如hor reload。release版本不会执行该函数。</p>
</blockquote>
<p>setState(VoidCallback fn) → void</p>
<blockquote>
<p>通知框架這個對象的內部狀態發生了變化</p>
</blockquote>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://api.flutter.dev/flutter/widgets/State-class.html">Flutter State Class</a></li>
<li><a href="https://api.flutter.dev/flutter/widgets/Navigator-class.html">Flutter Navigator Class</a></li>
<li><a href="https://blog.duicode.com/3108.html?fbclid=IwAR3yvdv5o3Nd2_3YRvBAqZVF4mN1Aef36WL1cE1LIfmC_SW26KZI8GWWNNU">Flutter中的生命周期</a></li>
<li><a href="https://www.cnblogs.com/ssjf/p/11759366.html">Flutter的生命週期</a></li>
<li><a href="https://www.youtube.com/watch?v=996ZgFRENMs">How Flutter renders Widgets</a></li>
</ul>
]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>使用flutter來製作過渡頁</title>
    <url>/2021/12/12/flutter-splash/</url>
    <content><![CDATA[<h1 id="使用flutter來製作過渡頁"><a href="#使用flutter來製作過渡頁" class="headerlink" title="使用flutter來製作過渡頁"></a>使用flutter來製作過渡頁</h1><blockquote>
<p>當app啟動時，有些app會有一個過渡的啟動頁面(Splash page)<br>今天我們就來簡單去實現</p>
</blockquote>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><p><img data-src="/2021/12/12/flutter-splash/2021-12-12-13-41-49.png" alt="structure"></p>
<p>main:</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:slash_screen/splash_screen.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(<span class="keyword">const</span> MyApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyApp(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// This widget is the root of your application.</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;Flutter Demo&#x27;</span>,</span><br><span class="line">      theme: ThemeData(</span><br><span class="line">        primarySwatch: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">      home: SplashScreen(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>home_screen:</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeScreen</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> HomeScreen(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">const</span> Scaffold(</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Text(<span class="string">&#x27;Home Page&#x27;</span>),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>splash_screen:</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:async&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:slash_screen/home_screen.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SplashScreen</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> SplashScreen(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;SplashScreen&gt; createState() =&gt; _SplashScreenState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_SplashScreenState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">SplashScreen</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> _time = <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">late</span> Timer _timer;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    startTimer();</span><br><span class="line">    _navToPage();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    _timer.cancel();</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//跳轉頁面</span></span><br><span class="line">  _navToPage() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> Future.delayed(</span><br><span class="line">      <span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">5</span>),</span><br><span class="line">    );</span><br><span class="line">    Navigator.pushReplacement(</span><br><span class="line">      context,</span><br><span class="line">      MaterialPageRoute(</span><br><span class="line">        builder: (context) =&gt; HomeScreen(),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 計數器</span></span><br><span class="line">  startTimer() &#123;</span><br><span class="line">    _timer = Timer.periodic(</span><br><span class="line">      <span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">1</span>),</span><br><span class="line">      (Timer timer) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_time == <span class="number">0</span>) &#123;</span><br><span class="line">          setState(() &#123;</span><br><span class="line">            timer.cancel();</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          setState(() &#123;</span><br><span class="line">            _time--;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Container(</span><br><span class="line">          child: Text(</span><br><span class="line">            <span class="string">&#x27;Splash and time <span class="subst">$_time</span>&#x27;</span>,</span><br><span class="line">            style: <span class="keyword">const</span> TextStyle(</span><br><span class="line">              fontSize: <span class="number">24</span>,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h2><p><img data-src="/2021/12/12/flutter-splash/splash_screen.gif" alt="splash"></p>
]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
        <tag>splash</tag>
      </tags>
  </entry>
</search>
