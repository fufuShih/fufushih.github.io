<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>在VSCode上使用Remix</title>
    <url>/2021/solidity/0ea97b244a3e/</url>
    <content><![CDATA[<h1 id="在VSCode上使用Remix"><a href="#在VSCode上使用Remix" class="headerlink" title="在VSCode上使用Remix"></a>在VSCode上使用Remix</h1><p>搜尋remix<br><img data-src="/2021/solidity/0ea97b244a3e/unknown_filename.1.png"><br><img data-src="/2021/solidity/0ea97b244a3e/unknown_filename.png"><br>並安裝</p>
<hr>
<p>根據前面那篇我們改使用Remix來測試: <a href="/2021/solidity/bfbd39565543/" title="Solidity: Hello World">Solidity: Hello World</a><br>(我們首先要開啟本地的測試網路，ganache-cli)<br><img data-src="/2021/solidity/0ea97b244a3e/unknown_filename.2.png"></p>
<p><img data-src="/2021/solidity/0ea97b244a3e/unknown_filename.4.png"></p>
<p>我們使用ganache啟動了本地測試網路，並且監聽port是在8545<br><img data-src="/2021/solidity/0ea97b244a3e/unknown_filename.3.png"></p>
<p>所以，改成8545並connect<br><img data-src="/2021/solidity/0ea97b244a3e/unknown_filename.5.png"><br>compile合約<br><img data-src="/2021/solidity/0ea97b244a3e/unknown_filename.6.png"><br>並佈署到測試網上，deploy<br><img data-src="/2021/solidity/0ea97b244a3e/unknown_filename.7.png"></p>
<p>我們來測試，到run並call我們的sayHello()<br><img data-src="/2021/solidity/0ea97b244a3e/unknown_filename.8.png"></p>
<p>最後，我們從output上來看<br><img data-src="/2021/solidity/0ea97b244a3e/unknown_filename.9.png"></p>
<p>…</p>
]]></content>
      <categories>
        <category>solidity</category>
      </categories>
      <tags>
        <tag>vscode</tag>
        <tag>remix</tag>
        <tag>solidity</tag>
      </tags>
  </entry>
  <entry>
    <title>Solidity: Hello World</title>
    <url>/2021/solidity/bfbd39565543/</url>
    <content><![CDATA[<h1 id="Solidity-Hello-World"><a href="#Solidity-Hello-World" class="headerlink" title="Solidity: Hello World"></a>Solidity: Hello World</h1><p>開發工具與環境設置</p>
<p>安裝所需要工具</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g truffle ganache-cli</span><br></pre></td></tr></table></figure>

<p>啟動 ganache-cli來啟動乙太坊測試環境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ganache-cli</span><br></pre></td></tr></table></figure>

<p><img data-src="/2021/solidity/bfbd39565543/unknown_filename.png"><br><img data-src="/2021/solidity/bfbd39565543/unknown_filename.1.png"></p>
<p>建立智能合約</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir hello</span><br><span class="line">cd hello</span><br><span class="line">truffle init</span><br><span class="line"></span><br><span class="line">truffle create contract HelloWorld #建立合約</span><br></pre></td></tr></table></figure>

<p><img data-src="/2021/solidity/bfbd39565543/unknown_filename.2.png"></p>
<p><img data-src="/2021/solidity/bfbd39565543/unknown_filename.3.png"><br>HelloWorld.sol:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity &gt;=0.4.22 &lt;0.9.0;</span><br><span class="line"></span><br><span class="line">contract HelloWorld &#123;</span><br><span class="line">  // constructor() public &#123;</span><br><span class="line">  // &#125;</span><br><span class="line"></span><br><span class="line">  function sayHello() public pure returns (string memory)&#123;</span><br><span class="line">    return (&quot;Hello World&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>編譯</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">truffle compile</span><br></pre></td></tr></table></figure>

<p>編譯成功的話，在build/contracts/目錄下會多出HelloWorld.json這個檔案<br><img data-src="/2021/solidity/bfbd39565543/unknown_filename.4.png"></p>
<p>部署</p>
<p>在migrate中新增2_deploy_contracts.js<br>(migration檔案會依照檔案的編號來執行。例如2_就會在1_之後執行。檔案後面的文字只為協助開發者理解之用)<br><img data-src="/2021/solidity/bfbd39565543/unknown_filename.5.png"><br>2_deploy_contracts.js:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var HelloWorld = artifacts.require(&quot;HelloWorld&quot;);</span><br><span class="line"></span><br><span class="line">module.exports = function(deployer) &#123;</span><br><span class="line">  deployer.deploy(HelloWorld);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>區塊網路設定<br>在truffle-config檔案裡L<br><img data-src="/2021/solidity/bfbd39565543/unknown_filename.6.png"><br>加入設定<br><img data-src="/2021/solidity/bfbd39565543/unknown_filename.7.png"></p>
<p>開始部署:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">truffle migrate</span><br></pre></td></tr></table></figure>

<p><img data-src="/2021/solidity/bfbd39565543/unknown_filename.8.png"></p>
<p>測試</p>
<p>使用truffle提供的命令行工具，執行:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">truffle console</span><br></pre></td></tr></table></figure>
<p>輸入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; let contract</span><br><span class="line">&gt; HelloWorld.deployed().then(instance =&gt; contract = instance)</span><br><span class="line">&gt; contract.sayHello.call()</span><br></pre></td></tr></table></figure>

<p><img data-src="/2021/solidity/bfbd39565543/unknown_filename.9.png"><br><img data-src="/2021/solidity/bfbd39565543/unknown_filename.10.png"><br>..</p>
<h2 id="我的名子合約"><a href="#我的名子合約" class="headerlink" title="我的名子合約"></a>我的名子合約</h2><blockquote>
<p>輸入名子，並藉由呼叫函數來顯示</p>
</blockquote>
<p>MyName.sol:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity &gt;=0.4.22 &lt;0.9.0;</span><br><span class="line"></span><br><span class="line">contract MyName &#123;</span><br><span class="line">  string public _name;</span><br><span class="line"></span><br><span class="line">  constructor() &#123;</span><br><span class="line">    _name=&quot;Please Type Your Name&quot;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function setName(string memory name) public&#123;</span><br><span class="line">    _name = name ;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function getName() public view returns (string memory)&#123;</span><br><span class="line">    return _name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>編譯並佈署後</p>
<p>我們開始測試</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">truffle console</span><br><span class="line"></span><br><span class="line">let contract</span><br><span class="line">MyName.deployed().then(instance =&gt; contract = instance)</span><br></pre></td></tr></table></figure>

<p><img data-src="/2021/solidity/bfbd39565543/2021-12-03-19-11-46.png"></p>
<p>call function:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">contract.getName.call()</span><br><span class="line">contract.setName(&quot;Test Name&quot;)</span><br></pre></td></tr></table></figure>

<p><img data-src="/2021/solidity/bfbd39565543/2021-12-03-19-14-18.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">contract.getName.call()</span><br></pre></td></tr></table></figure>

<p><img data-src="/2021/solidity/bfbd39565543/2021-12-03-19-14-46.png"></p>
]]></content>
      <categories>
        <category>solidity</category>
      </categories>
      <tags>
        <tag>solidity</tag>
      </tags>
  </entry>
  <entry>
    <title>Solidity:創建簡易代幣</title>
    <url>/2021/solidity/3f900b5bbcb5/</url>
    <content><![CDATA[<h1 id="Solidity-創建簡易代幣"><a href="#Solidity-創建簡易代幣" class="headerlink" title="Solidity:創建簡易代幣"></a>Solidity:創建簡易代幣</h1><p>在終端輸入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">truffle create contract MyToken</span><br></pre></td></tr></table></figure>

<p>創建<br><img data-src="/2021/solidity/3f900b5bbcb5/unknown_filename.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity &gt;=0.4.22 &lt;0.9.0;</span><br><span class="line"></span><br><span class="line">contract MyToken &#123;</span><br><span class="line">  uint INITIAL_SUPPLY = 10000;</span><br><span class="line">  mapping(address =&gt; uint) balances;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    balances[msg.sender] = INITIAL_SUPPLY;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // transfer token for a specified address</span><br><span class="line">  function transfer(address _to, uint _amount) public &#123;</span><br><span class="line">    require(balances[msg.sender] &gt; _amount);</span><br><span class="line">    balances[msg.sender] -= _amount;</span><br><span class="line">    balances[_to] += _amount;</span><br><span class="line">  &#125;</span><br><span class="line">  // Gets the balance of the specified address</span><br><span class="line">  // Constant and Immutable State Variables. See https://docs.soliditylang.org/en/v0.8.10/contracts.html#modifiers</span><br><span class="line">  function balanceOf(address _owner) public view returns (uint) &#123;</span><br><span class="line">    return balances[_owner];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在migrations資料夾新增</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var HelloWorld = artifacts.require(&quot;HelloWorld&quot;);</span><br><span class="line">var MyToken = artifacts.require(&quot;MyToken&quot;);</span><br><span class="line"></span><br><span class="line">module.exports = function(deployer) &#123;</span><br><span class="line">  deployer.deploy(HelloWorld);</span><br><span class="line">  deployer.deploy(MyToken);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>編譯</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">truffle compile</span><br></pre></td></tr></table></figure>

<p><img data-src="/2021/solidity/3f900b5bbcb5/unknown_filename.1.png"></p>
<p>開始部署，Run</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">truffle migrate</span><br></pre></td></tr></table></figure>
<p><img data-src="/2021/solidity/3f900b5bbcb5/unknown_filename.6.png"><br><img data-src="/2021/solidity/3f900b5bbcb5/unknown_filename.2.png"></p>
<p>Test</p>
<p>開啟console</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">truffle console</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let contract</span><br><span class="line">MyToken.deployed().then(instance =&gt; contract = instance)</span><br></pre></td></tr></table></figure>
<p><img data-src="/2021/solidity/3f900b5bbcb5/unknown_filename.3.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">contract.balanceOf(accounts[0])</span><br><span class="line">contract.balanceOf(accounts[1])</span><br></pre></td></tr></table></figure>
<p><img data-src="/2021/solidity/3f900b5bbcb5/unknown_filename.4.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">contract.transfer(accounts[1], 123)</span><br><span class="line">contract.balanceOf(accounts[0])</span><br><span class="line">contract.balanceOf.call(accounts[1])</span><br></pre></td></tr></table></figure>

<p><img data-src="/2021/solidity/3f900b5bbcb5/unknown_filename.5.png"></p>
<p>…</p>
]]></content>
      <categories>
        <category>solidity</category>
      </categories>
      <tags>
        <tag>solidity</tag>
      </tags>
  </entry>
  <entry>
    <title>Solidity:創建ERC20標準代幣</title>
    <url>/2021/solidity/3f4574248609/</url>
    <content><![CDATA[<h1 id="Solidity-創建ERC20標準代幣"><a href="#Solidity-創建ERC20標準代幣" class="headerlink" title="Solidity:創建ERC20標準代幣"></a>Solidity:創建ERC20標準代幣</h1><p>關於ERC20 Token</p>
<ul>
<li>具備完整貨幣交易功能的代幣。</li>
<li>所有ERC20 Token由ETH錢包地址來進行管理 (智能合約上面記載著某個以太坊地址有多少該Token的存在)</li>
</ul>
<p>關於ERC20:<br><a href="https://theethereum.wiki/erc20_token_standard/">ERC20</a><br><a href="https://eips.ethereum.org/EIPS/eip-20">EIP20</a></p>
<h2 id="ERC20-簡述"><a href="#ERC20-簡述" class="headerlink" title="ERC20 簡述"></a>ERC20 簡述</h2><p>1.name: Token的名子</p>
<blockquote>
<p>function name() public view returns (string)</p>
</blockquote>
<p>2.symbol: Token的符號</p>
<blockquote>
<p>function symbol() public view returns (string)</p>
</blockquote>
<p>3.decimals: token使用的number of decimal(ex. 8, 代表將token數量除以100000000，讓用戶去表示)</p>
<blockquote>
<p>function decimals() public view returns (uint8)</p>
</blockquote>
<p>4.totalSupply: token的總供應</p>
<blockquote>
<p>function totalSupply() public view returns (uint256)</p>
</blockquote>
<p>5.balanceOf: 返回_owner的賬戶餘額</p>
<blockquote>
<p>function balanceOf(address _owner) public view returns (uint256 balance)</p>
</blockquote>
<p>6.transfer: 將_value數量的代幣轉移到地址_to，並且必須觸發Transfer事件。</p>
<blockquote>
<p>function transfer(address _to, uint256 _value) public returns (bool success)</p>
</blockquote>
<p>7.transferFrom: 將代幣從地址_from 轉移到地址 _to，並且必須觸發 Transfer 事件。</p>
<blockquote>
<p>function transferFrom(address _from, address _to, uint256 _value) public returns (bool success)</p>
</blockquote>
<p>8.approve: 允許_spender多次從您的賬戶中提款，最多可達_value 金額。</p>
<blockquote>
<p>function approve(address _spender, uint256 _value) public returns (bool success)</p>
</blockquote>
<p>9.allowance:  返回_spender仍可從_owner提取的金額。</p>
<blockquote>
<p>function allowance(address _owner, address _spender) public view returns (uint256 remaining)</p>
</blockquote>
<p>Token Contract運作方式</p>
<p><strong>查詢Token Balance</strong>:</p>
<blockquote>
<p>0x1111111111111111111111111111111111111111 with a balance of 100 units</p>
<p>0x2222222222222222222222222222222222222222 with a balance of 200 units</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">balances[0x1111111111111111111111111111111111111111] = 100</span><br><span class="line">balances[0x2222222222222222222222222222222222222222] = 200</span><br></pre></td></tr></table></figure>

<blockquote>
<p>tokenContract.balanceOf(0x1111111111111111111111111111111111111111) will return 100</p>
<p>tokenContract.balanceOf(0x2222222222222222222222222222222222222222) will return 200</p>
</blockquote>
<p><strong>轉移Token Balance</strong>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tokenContract.transfer(0x2222222222222222222222222222222222222222, 10) // 1...1想轉10 token給2...2</span><br></pre></td></tr></table></figure>

<blockquote>
<p>tokenContract.balanceOf(0x1111111111111111111111111111111111111111) will return 90</p>
<p>tokenContract.balanceOf(0x2222222222222222222222222222222222222222) will return 210</p>
</blockquote>
<p><strong>批准和從他處轉移Token Balance</strong>:</p>
<p>如果0x1…1要授權0x2…2，並傳遞到0x2…2，0x1…1執行的函數：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tokenContract.approve(0x2222222222222222222222222222222222222222, 30)</span><br></pre></td></tr></table></figure>

<p>如果0x2…2希望以後從0x1…1傳遞一些token，0x2…2執行transferFrom（…）函數：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tokenContract.transferFrom(0x1111111111111111111111111111111111111111, 0x2222222222222222222222222222222222222222, 20)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>tokenContract.balances[0x1111111111111111111111111111111111111111] = 70</p>
<p>tokenContract.balances[0x2222222222222222222222222222222222222222] = 230</p>
</blockquote>
<p>0x2…2 仍然可以花費 0x1…1的 10 個代幣。(30 - 20)</p>
<h2 id="Practice練習"><a href="#Practice練習" class="headerlink" title="Practice練習"></a>Practice練習</h2><p>現在我們使用OpenZeppelin</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install @openzeppelin/contracts</span><br></pre></td></tr></table></figure>

<p>建立合約:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">truffle create contract MyTokenEnhance</span><br></pre></td></tr></table></figure>

<p>MyTokenEnhance.sol:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity &gt;=0.4.22 &lt;0.9.0;</span><br><span class="line">import &quot;@openzeppelin/contracts/token/ERC20/ERC20.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract MyTokenEnhance is ERC20 &#123;</span><br><span class="line">  constructor() ERC20(&quot;MyToken&quot;, &quot;MTE&quot;) &#123;</span><br><span class="line">    // Mint 100 tokens to msg.sender</span><br><span class="line">    // Similar to how</span><br><span class="line">    // 1 dollar = 100 cents</span><br><span class="line">    // 1 token = 1 * (10 ** decimals)</span><br><span class="line">    _mint(msg.sender, 100 * 10**uint(decimals()));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>add</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var HelloWorld = artifacts.require(&quot;HelloWorld&quot;);</span><br><span class="line">// var MyToken = artifacts.require(&quot;MyToken&quot;);</span><br><span class="line">var MyTokenEnhance = artifacts.require(&quot;MyTokenEnhance&quot;)</span><br><span class="line"></span><br><span class="line">module.exports = function(deployer) &#123;</span><br><span class="line">  deployer.deploy(HelloWorld);</span><br><span class="line">//   deployer.deploy(MyToken);</span><br><span class="line">  deployer.deploy(MyTokenEnhance);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><img data-src="/2021/solidity/3f4574248609/unknown_filename.2.png"></p>
<p>run</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">truffle compile</span><br></pre></td></tr></table></figure>

<p><img data-src="/2021/solidity/3f4574248609/unknown_filename.png"></p>
<p>and then, run</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">truffle migrate</span><br></pre></td></tr></table></figure>

<p><img data-src="/2021/solidity/3f4574248609/unknown_filename.3.png"></p>
<p>使用console測試:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">truffle console</span><br></pre></td></tr></table></figure>

<p>Test</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let contract</span><br><span class="line">MyTokenEnhance.deployed().then(instance =&gt; contract = instance)</span><br></pre></td></tr></table></figure>

<p><img data-src="/2021/solidity/3f4574248609/unknown_filename.1.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">contract.balanceOf(accounts[0])</span><br><span class="line">contract.balanceOf(accounts[1])</span><br></pre></td></tr></table></figure>

<p><img data-src="/2021/solidity/3f4574248609/unknown_filename.4.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">contract.transfer(accounts[1], 50)</span><br><span class="line">contract.balanceOf(accounts[0])</span><br><span class="line">contract.balanceOf.call(accounts[1])</span><br></pre></td></tr></table></figure>

<p><img data-src="/2021/solidity/3f4574248609/unknown_filename.5.png"></p>
<p><img data-src="/2021/solidity/3f4574248609/unknown_filename.6.png"></p>
<p>..</p>
<h2 id="使用remix"><a href="#使用remix" class="headerlink" title="使用remix"></a>使用remix</h2><p><img data-src="/2021/solidity/3f4574248609/2021-12-15-17-38-33.png"></p>
<p>connect local net</p>
<p><img data-src="/2021/solidity/3f4574248609/2021-12-15-17-38-25.png"></p>
<p>Click compile and deploy</p>
<p><img data-src="/2021/solidity/3f4574248609/2021-12-15-17-39-41.png"></p>
<p><img data-src="/2021/solidity/3f4574248609/2021-12-15-17-40-45.png"></p>
<hr>
<p>Now, we call these function</p>
<p><img data-src="/2021/solidity/3f4574248609/2021-12-15-17-41-39.png"></p>
<p>Result:</p>
<p><img data-src="/2021/solidity/3f4574248609/2021-12-15-17-42-15.png"></p>
<hr>
<p>Test transfer:</p>
<p>See address</p>
<p><img data-src="/2021/solidity/3f4574248609/2021-12-15-17-43-36.png"></p>
<p>call transfer:</p>
<p><img data-src="/2021/solidity/3f4574248609/2021-12-15-17-43-57.png"></p>
<p>Call balanceof:</p>
<p><img data-src="/2021/solidity/3f4574248609/2021-12-15-17-44-52.png"></p>
<p>result:</p>
<p><img data-src="/2021/solidity/3f4574248609/2021-12-15-17-45-07.png"></p>
]]></content>
      <categories>
        <category>solidity</category>
      </categories>
      <tags>
        <tag>solidity</tag>
      </tags>
  </entry>
  <entry>
    <title>使用flutter來建立dapp-2</title>
    <url>/2021/flutter/2fe3b24ab0ed/</url>
    <content><![CDATA[<h1 id="使用flutter來建立dapp-2"><a href="#使用flutter來建立dapp-2" class="headerlink" title="使用flutter來建立dapp-2"></a>使用flutter來建立dapp-2</h1><h2 id="建立"><a href="#建立" class="headerlink" title="建立"></a>建立</h2><p>接下來，我們來新增一些功能，把我們的Name上傳並且回傳回來</p>
<p>首先，是我們的合約，我們先新增一個合約MyName.sol:</p>
<p><img data-src="/2021/flutter/2fe3b24ab0ed/2021-12-08-20-35-51.png" alt="contract structure"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity &gt;=0.4.22 &lt;0.9.0;</span><br><span class="line"></span><br><span class="line">contract MyName &#123;</span><br><span class="line">  string public _name;</span><br><span class="line"></span><br><span class="line">  constructor() &#123;</span><br><span class="line">    _name=&quot;Please Type Your Name&quot;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function setName(string memory name) public&#123;</span><br><span class="line">    _name = name ;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function getName() public view returns (string memory)&#123;</span><br><span class="line">    return _name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>並重新設定migrations:</p>
<p>migrations/1_initial_migration.js:</p>
<p><img data-src="/2021/flutter/2fe3b24ab0ed/2021-12-08-20-45-32.png"></p>
<p>我們去編譯並佈署:</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">truffle compile</span><br><span class="line">truffle migrate</span><br></pre></td></tr></table></figure>

<p><img data-src="/2021/flutter/2fe3b24ab0ed/2021-12-08-20-48-45.png"></p>
<p>成功後，我們開始建立我們的flutter dapp</p>
<p>我們的flutter專案架構:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lib</span><br><span class="line">  core</span><br><span class="line">    service</span><br><span class="line">    states</span><br><span class="line">  ui</span><br><span class="line">    screens</span><br><span class="line">    widgets</span><br></pre></td></tr></table></figure>

<p><img data-src="/2021/flutter/2fe3b24ab0ed/2021-12-08-20-51-02.png"></p>
<p>需要的套件以及assets:<br><img data-src="/2021/flutter/2fe3b24ab0ed/2021-12-08-20-56-02.png"></p>
<p><img data-src="/2021/flutter/2fe3b24ab0ed/2021-12-08-20-59-31.png"></p>
<p>我們把compile後的json檔放入flutter的assets中:<br><img data-src="/2021/flutter/2fe3b24ab0ed/2021-12-08-20-53-44.png"></p>
<hr>
<p>接下來，我們來實現我們要的功能:</p>
<p>core/services/contract_linking_service.dart:</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:convert&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/services.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:web3dart/web3dart.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContractLinkingService</span> </span>&#123;</span><br><span class="line">  Future&lt;<span class="built_in">String</span>&gt; getAbi(<span class="built_in">String</span> path) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="comment">// Reading the contract abi</span></span><br><span class="line">    <span class="built_in">String</span> abiStringFile = <span class="keyword">await</span> rootBundle.loadString(path);</span><br><span class="line">    <span class="keyword">var</span> jsonAbi = jsonDecode(abiStringFile);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> jsonEncode(jsonAbi[<span class="string">&quot;abi&quot;</span>]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Future&lt;EthereumAddress&gt; getContractAddress(<span class="built_in">String</span> path, <span class="built_in">String</span> net) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="comment">// Reading the contract abi</span></span><br><span class="line">    <span class="built_in">String</span> abiStringFile = <span class="keyword">await</span> rootBundle.loadString(path);</span><br><span class="line">    <span class="keyword">var</span> jsonAbi = jsonDecode(abiStringFile);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> EthereumAddress.fromHex(jsonAbi[<span class="string">&quot;networks&quot;</span>][net][<span class="string">&quot;address&quot;</span>]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Future&lt;Credentials&gt; getCredentials(<span class="built_in">String</span> _privateKey) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> EthPrivateKey.fromHex(_privateKey);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Future&lt;DeployedContract&gt; getDeployedContract(</span><br><span class="line">      <span class="built_in">String</span> _abiCode, <span class="built_in">String</span> _name, EthereumAddress _contractAddress) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="comment">//  Telling Web3dart where our contract is declared.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> DeployedContract(</span><br><span class="line">        ContractAbi.fromJson(_abiCode, _name), _contractAddress);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>core/services/services.dart:</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="string">&#x27;./contract_linking_service.dart&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>core/states/contract_state.dart:</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter_web3_app/core/services/services.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:http/http.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:web3dart/web3dart.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:web_socket_channel/io.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContractState</span> <span class="keyword">extends</span> <span class="title">ChangeNotifier</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> ContractLinkingService contractLinkingService =</span><br><span class="line">      ContractLinkingService();</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> _rpcUrl = <span class="string">&quot;http://10.0.2.2:8545&quot;</span>;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> _wsUrl = <span class="string">&quot;ws://10.0.2.2:8545/&quot;</span>;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> _privateKey =</span><br><span class="line">      <span class="string">&#x27;0xb57ae20c98201b5dd0216dfafc0f71b91113de9c1de09676065084ee83979ab2&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">String</span> name = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">late</span> Web3Client _client;</span><br><span class="line">  <span class="keyword">late</span> <span class="built_in">String</span> _abiCode;</span><br><span class="line">  <span class="keyword">late</span> Credentials _credentials;</span><br><span class="line">  <span class="keyword">late</span> EthereumAddress _contractAddress;</span><br><span class="line">  <span class="keyword">late</span> DeployedContract _contract;</span><br><span class="line"></span><br><span class="line">  ContractState() &#123;</span><br><span class="line">    initialSetup();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  initialSetup() <span class="keyword">async</span> &#123;</span><br><span class="line">    _client = Web3Client(_rpcUrl, Client(), socketConnector: () &#123;</span><br><span class="line">      <span class="keyword">return</span> IOWebSocketChannel.connect(_wsUrl).cast&lt;<span class="built_in">String</span>&gt;();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    _abiCode =</span><br><span class="line">        <span class="keyword">await</span> contractLinkingService.getAbi(<span class="string">&quot;assets/artifacts/MyName.json&quot;</span>);</span><br><span class="line">    _contractAddress = <span class="keyword">await</span> contractLinkingService.getContractAddress(</span><br><span class="line">        <span class="string">&quot;assets/artifacts/MyName.json&quot;</span>, <span class="string">&quot;1638897663028&quot;</span>);</span><br><span class="line">    _contract = <span class="keyword">await</span> contractLinkingService.getDeployedContract(</span><br><span class="line">        _abiCode, <span class="string">&quot;MyName&quot;</span>, _contractAddress);</span><br><span class="line">    _credentials = <span class="keyword">await</span> contractLinkingService.getCredentials(_privateKey);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getName() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="comment">// Getting the current name declared in the smart contract.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> currentName = <span class="keyword">await</span> _client.call(</span><br><span class="line">        contract: _contract,</span><br><span class="line">        function: _contract.function(<span class="string">&quot;getName&quot;</span>),</span><br><span class="line">        params: []);</span><br><span class="line">    name = currentName[<span class="number">0</span>];</span><br><span class="line">    notifyListeners();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setName(<span class="built_in">String</span> name) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="comment">// Setting the name to nameToSet(name defined by user)</span></span><br><span class="line">    notifyListeners();</span><br><span class="line">    <span class="keyword">await</span> _client.sendTransaction(</span><br><span class="line">        _credentials,</span><br><span class="line">        Transaction.callContract(</span><br><span class="line">            contract: _contract,</span><br><span class="line">            function: _contract.function(<span class="string">&quot;setName&quot;</span>),</span><br><span class="line">            parameters: [name]));</span><br><span class="line">    getName();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>core/states/states.dart:</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="string">&#x27;./contract_state.dart&#x27;</span>;</span><br></pre></td></tr></table></figure>

<hr>
<p>接下來，是我們UI的部分:</p>
<p>ui/screens/home_screen.dart:</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter_web3_app/core/states/states.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:provider/provider.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeScreen</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> HomeScreen(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// Getting the value and object or contract_linking</span></span><br><span class="line">    <span class="keyword">final</span> contractLink = Provider.of&lt;ContractState&gt;(context);</span><br><span class="line">    TextEditingController _textController = TextEditingController();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: <span class="keyword">const</span> Text(<span class="string">&quot;Smart Contract Test!&quot;</span>),</span><br><span class="line">        centerTitle: <span class="keyword">true</span>,</span><br><span class="line">      ),</span><br><span class="line">      body: Container(</span><br><span class="line">        padding: <span class="keyword">const</span> EdgeInsets.symmetric(horizontal: <span class="number">20</span>),</span><br><span class="line">        child: Center(</span><br><span class="line">          child: SingleChildScrollView(</span><br><span class="line">            child: Form(</span><br><span class="line">              child: Column(</span><br><span class="line">                children: [</span><br><span class="line">                  Row(</span><br><span class="line">                    mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">                    children: [</span><br><span class="line">                      Text(</span><br><span class="line">                        contractLink.name,</span><br><span class="line">                        style: <span class="keyword">const</span> TextStyle(</span><br><span class="line">                            fontWeight: FontWeight.bold,</span><br><span class="line">                            fontSize: <span class="number">26</span>,</span><br><span class="line">                            color: Colors.tealAccent),</span><br><span class="line">                      ),</span><br><span class="line">                    ],</span><br><span class="line">                  ),</span><br><span class="line">                  Padding(</span><br><span class="line">                    padding: <span class="keyword">const</span> EdgeInsets.only(top: <span class="number">29</span>),</span><br><span class="line">                    child: TextFormField(</span><br><span class="line">                      controller: _textController,</span><br><span class="line">                      decoration: <span class="keyword">const</span> InputDecoration(</span><br><span class="line">                        border: OutlineInputBorder(),</span><br><span class="line">                        labelText: <span class="string">&quot;Your Name&quot;</span>,</span><br><span class="line">                      ),</span><br><span class="line">                    ),</span><br><span class="line">                  ),</span><br><span class="line">                  Padding(</span><br><span class="line">                    padding: <span class="keyword">const</span> EdgeInsets.only(top: <span class="number">30</span>),</span><br><span class="line">                    child: ElevatedButton(</span><br><span class="line">                      child: <span class="keyword">const</span> Text(</span><br><span class="line">                        <span class="string">&#x27;Set your name&#x27;</span>,</span><br><span class="line">                        style: TextStyle(fontSize: <span class="number">30</span>),</span><br><span class="line">                      ),</span><br><span class="line">                      style: ElevatedButton.styleFrom(</span><br><span class="line">                        primary: Colors.green,</span><br><span class="line">                      ),</span><br><span class="line">                      onPressed: () &#123;</span><br><span class="line">                        contractLink.setName(_textController.text);</span><br><span class="line">                        _textController.clear();</span><br><span class="line">                      &#125;,</span><br><span class="line">                    ),</span><br><span class="line">                  ),</span><br><span class="line">                ],</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">        onPressed: () <span class="keyword">async</span> =&gt; <span class="keyword">await</span> contractLink.getName(),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ui/screens/screens.dart</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="string">&#x27;./home_screen.dart&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>main.dart:</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter_web3_app/core/states/states.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter_web3_app/ui/screens/screens.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:provider/provider.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(<span class="keyword">const</span> MyApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyApp(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// This widget is the root of your application.</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> ChangeNotifierProvider&lt;ContractState&gt;(</span><br><span class="line">      create: (_) =&gt; ContractState(),</span><br><span class="line">      child: MaterialApp(</span><br><span class="line">        title: <span class="string">&quot;Hello World&quot;</span>,</span><br><span class="line">        theme: ThemeData(</span><br><span class="line">          brightness: Brightness.dark,</span><br><span class="line">          primaryColor: Colors.cyan[<span class="number">400</span>],</span><br><span class="line">        ),</span><br><span class="line">        home: <span class="keyword">const</span> HomeScreen(),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>接下來，我們來進行測試:</p>
<p><img data-src="/2021/flutter/2fe3b24ab0ed/2021-12-08-21-06-40.png"></p>
<p>我們先按fab，來獲取網路節點上的name</p>
<p><img data-src="/2021/flutter/2fe3b24ab0ed/2021-12-08-21-28-12.png"></p>
<p>接下來，我們輸入一個name並set(這邊我輸入fufu):</p>
<p><img data-src="/2021/flutter/2fe3b24ab0ed/2021-12-08-21-28-53.png"></p>
<p>改輸入別的name</p>
<p><img data-src="/2021/flutter/2fe3b24ab0ed/2021-12-08-21-29-33.png"></p>
<p>result:<br><img data-src="/2021/flutter/2fe3b24ab0ed/2021-12-08-21-29-55.png"></p>
<hr>
<h2 id="Note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h2><p>在我們的core/states/contract_state.dart中:</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> ContractLinkingService contractLinkingService =</span><br><span class="line">    ContractLinkingService();</span><br><span class="line"><span class="keyword">final</span> <span class="built_in">String</span> _rpcUrl = <span class="string">&quot;http://10.0.2.2:8545&quot;</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="built_in">String</span> _wsUrl = <span class="string">&quot;ws://10.0.2.2:8545/&quot;</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="built_in">String</span> _privateKey =</span><br><span class="line">    <span class="string">&#x27;0xb57ae20c98201b5dd0216dfafc0f71b91113de9c1de09676065084ee83979ab2&#x27;</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>rpcUrl 以及 wsUrl式連線到我們的node節點上</p>
</blockquote>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">initialSetup() <span class="keyword">async</span> &#123;</span><br><span class="line">  _client = Web3Client(_rpcUrl, Client(), socketConnector: () &#123;</span><br><span class="line">    <span class="keyword">return</span> IOWebSocketChannel.connect(_wsUrl).cast&lt;<span class="built_in">String</span>&gt;();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  _abiCode =</span><br><span class="line">      <span class="keyword">await</span> contractLinkingService.getAbi(<span class="string">&quot;assets/artifacts/MyName.json&quot;</span>);</span><br><span class="line">  _contractAddress = <span class="keyword">await</span> contractLinkingService.getContractAddress(</span><br><span class="line">      <span class="string">&quot;assets/artifacts/MyName.json&quot;</span>, <span class="string">&quot;1638897663028&quot;</span>);</span><br><span class="line">  _contract = <span class="keyword">await</span> contractLinkingService.getDeployedContract(</span><br><span class="line">      _abiCode, <span class="string">&quot;MyName&quot;</span>, _contractAddress);</span><br><span class="line">  _credentials = <span class="keyword">await</span> contractLinkingService.getCredentials(_privateKey);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>對於contractLinkingService.getContractAddress(“assets/artifacts/MyName.json”, “1638897663028”);<br>那個1638897663028是block的timestamp<br>我們能在deploy合約時，能看到</p>
</blockquote>
<p><img data-src="/2021/flutter/2fe3b24ab0ed/2021-12-08-21-44-10.png"></p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">getName() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="comment">// Getting the current name declared in the smart contract.</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> currentName = <span class="keyword">await</span> _client.call(</span><br><span class="line">      contract: _contract,</span><br><span class="line">      function: _contract.function(<span class="string">&quot;getName&quot;</span>),</span><br><span class="line">      params: []);</span><br><span class="line">  name = currentName[<span class="number">0</span>];</span><br><span class="line">  notifyListeners();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>我們去呼叫合約上的getName</p>
</blockquote>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">setName(<span class="built_in">String</span> name) <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="comment">// Setting the name to nameToSet(name defined by user)</span></span><br><span class="line">  notifyListeners();</span><br><span class="line">  <span class="keyword">await</span> _client.sendTransaction(</span><br><span class="line">      _credentials,</span><br><span class="line">      Transaction.callContract(</span><br><span class="line">          contract: _contract,</span><br><span class="line">          function: _contract.function(<span class="string">&quot;setName&quot;</span>),</span><br><span class="line">          parameters: [name]));</span><br><span class="line">  getName();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>我們去transaction我們的name到節點上</p>
</blockquote>
<h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ul>
<li><a href="https://docs.soliditylang.org/en/latest/index.html">solidity</a></li>
<li><a href="https://pub.dev/packages/web3dart">web3dart</a></li>
<li><a href="https://www.geeksforgeeks.org/flutter-and-blockchain-hello-world-dapp/">Flutter and Blockchain – Hello World Dapp</a></li>
</ul>
]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>solidity</tag>
        <tag>flutter</tag>
        <tag>dapp</tag>
        <tag>truffle</tag>
        <tag>ganache</tag>
      </tags>
  </entry>
  <entry>
    <title>使用flutter來建立dapp-3</title>
    <url>/2021/flutter/1ee6ee03be86/</url>
    <content><![CDATA[<h1 id="使用flutter來建立dapp-3"><a href="#使用flutter來建立dapp-3" class="headerlink" title="使用flutter來建立dapp-3"></a>使用flutter來建立dapp-3</h1><p>啟動ganache-cli</p>
<p><img data-src="/2021/flutter/1ee6ee03be86/2021-12-21-01-19-15.png" alt="ganache"></p>
<h2 id="smart-contract"><a href="#smart-contract" class="headerlink" title="smart contract"></a>smart contract</h2><p>現在開始compile並deploy我們的合約</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity &gt;=0.4.22 &lt;0.9.0;</span><br><span class="line">import &quot;@openzeppelin/contracts/token/ERC20/ERC20.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract MyTokenEnhance is ERC20 &#123;</span><br><span class="line">  constructor() ERC20(&quot;MyToken&quot;, &quot;MTE&quot;) &#123;</span><br><span class="line">    // Mint 100 tokens to msg.sender</span><br><span class="line">    // Similar to how</span><br><span class="line">    // 1 dollar = 100 cents</span><br><span class="line">    // 1 token = 1 * (10 ** decimals)</span><br><span class="line">    _mint(msg.sender, 100 * 10**uint(decimals()));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>migrations/1_initial_migration.js:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> MyToken = artifacts.require(<span class="string">&quot;MyTokenEnhance&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">deployer</span>) </span>&#123;</span><br><span class="line">  deployer.deploy(MyToken);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>Run</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">truffle compile</span><br><span class="line">truffle migrate</span><br></pre></td></tr></table></figure>

<p><img data-src="/2021/flutter/1ee6ee03be86/2021-12-21-01-21-48.png"></p>
<p>接下來準備我們的flutter</p>
<h2 id="flutter-dapp"><a href="#flutter-dapp" class="headerlink" title="flutter dapp"></a>flutter dapp</h2><p>我們專案的架構<br><img data-src="/2021/flutter/1ee6ee03be86/2021-12-21-01-22-47.png"></p>
<p>pubspec.yaml:</p>
<p><img data-src="/2021/flutter/1ee6ee03be86/2021-12-21-01-23-52.png" alt="package"></p>
<p><img data-src="/2021/flutter/1ee6ee03be86/2021-12-21-01-24-15.png" alt="assets"></p>
<p>到build\contracts找到我們的MyTokenEnhance.json，把他copy到我們flutter的assets/artifacts裡</p>
<p>在MyTokenEnhance.json我們看到</p>
<p><img data-src="/2021/flutter/1ee6ee03be86/2021-12-21-01-25-43.png"></p>
<h2 id="flutter-core"><a href="#flutter-core" class="headerlink" title="flutter core"></a>flutter core</h2><p>contract_linking_service.dart:</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:convert&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/services.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:web3dart/web3dart.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContractLinkingService</span> </span>&#123;</span><br><span class="line">  Future&lt;<span class="built_in">String</span>&gt; getAbi(<span class="built_in">String</span> path) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="comment">// Reading the contract abi</span></span><br><span class="line">    <span class="built_in">String</span> abiStringFile = <span class="keyword">await</span> rootBundle.loadString(path);</span><br><span class="line">    <span class="keyword">var</span> jsonAbi = jsonDecode(abiStringFile);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> jsonEncode(jsonAbi[<span class="string">&quot;abi&quot;</span>]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Future&lt;EthereumAddress&gt; getContractAddress(<span class="built_in">String</span> path, <span class="built_in">String</span> net) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="comment">// Reading the contract abi</span></span><br><span class="line">    <span class="built_in">String</span> abiStringFile = <span class="keyword">await</span> rootBundle.loadString(path);</span><br><span class="line">    <span class="keyword">var</span> jsonAbi = jsonDecode(abiStringFile);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> EthereumAddress.fromHex(jsonAbi[<span class="string">&quot;networks&quot;</span>][net][<span class="string">&quot;address&quot;</span>]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Future&lt;Credentials&gt; getCredentials(<span class="built_in">String</span> _privateKey) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> EthPrivateKey.fromHex(_privateKey);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Future&lt;DeployedContract&gt; getDeployedContract(</span><br><span class="line">      <span class="built_in">String</span> _abiCode, <span class="built_in">String</span> _name, EthereumAddress _contractAddress) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="comment">//  Telling Web3dart where our contract is declared.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> DeployedContract(</span><br><span class="line">        ContractAbi.fromJson(_abiCode, _name), _contractAddress);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Future&lt;<span class="built_in">List</span>&lt;<span class="built_in">dynamic</span>&gt;&gt; query(Web3Client client, DeployedContract contract,</span><br><span class="line">      <span class="built_in">String</span> func, <span class="built_in">List</span>&lt;<span class="built_in">dynamic</span>&gt; args) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> _ethFunction = contract.function(func);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> client.call(</span><br><span class="line">        contract: contract, function: _ethFunction, params: args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>wallet_service.dart:</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:bip39/bip39.dart&#x27;</span> <span class="keyword">as</span> bip39;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:web3dart/web3dart.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:ed25519_hd_key/ed25519_hd_key.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:hex/hex.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WalletService</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> generateMnemonic() &#123;</span><br><span class="line">    <span class="keyword">return</span> bip39.generateMnemonic();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Future&lt;<span class="built_in">String</span>&gt; getPrivateKeyByMnemonic(<span class="built_in">String</span> mnemonic) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> seed = bip39.mnemonicToSeed(mnemonic);</span><br><span class="line">    <span class="keyword">final</span> master = <span class="keyword">await</span> ED25519_HD_KEY.getMasterKeyFromSeed(seed);</span><br><span class="line">    <span class="keyword">final</span> privateKey = HEX.encode(master.key);</span><br><span class="line">    <span class="keyword">return</span> privateKey;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Future&lt;EthereumAddress&gt; getPublicKey(<span class="built_in">String</span> privateKey) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> private = EthPrivateKey.fromHex(privateKey);</span><br><span class="line">    <span class="keyword">final</span> address = <span class="keyword">await</span> private.extractAddress();</span><br><span class="line">    <span class="keyword">return</span> address;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>services.dart</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="string">&#x27;./contract_linking_service.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="string">&#x27;./wallet_service.dart&#x27;</span>;</span><br></pre></td></tr></table></figure>

<hr>
<p>wallet_state.dart:</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/foundation.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter_wallet/core/service/services.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:http/http.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:web3dart/web3dart.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:web_socket_channel/io.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> Stage &#123; error, start, loading, done &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WalletState</span> <span class="title">with</span> <span class="title">ChangeNotifier</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> ContractLinkingService contractLinkingService =</span><br><span class="line">      ContractLinkingService();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> _rpcUrl = <span class="string">&quot;http://10.0.2.2:8545&quot;</span>;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> _wsUrl = <span class="string">&quot;ws://10.0.2.2:8545/&quot;</span>;</span><br><span class="line">  <span class="comment">// final String _privateKey =</span></span><br><span class="line">  <span class="comment">//     &#x27;0x6a68870ea6a1f4407d687304f161ca723bbb50c72784fdbcddefafba7317a304&#x27;; // Using Account 1</span></span><br><span class="line">  <span class="comment">// final EthereumAddress _myAddress =</span></span><br><span class="line">  <span class="comment">//     EthereumAddress.fromHex(&#x27;0x4a6D27F343253460Ff3F837160c6eCf0705a416A&#x27;);</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">late</span> Web3Client _client;</span><br><span class="line">  <span class="keyword">late</span> <span class="built_in">String</span> _abiCode;</span><br><span class="line">  <span class="keyword">late</span> Credentials _credentials;</span><br><span class="line">  <span class="keyword">late</span> EthereumAddress _contractAddress;</span><br><span class="line">  <span class="keyword">late</span> DeployedContract _contract;</span><br><span class="line"></span><br><span class="line">  EthereumAddress <span class="keyword">get</span> contractAddress =&gt; _contractAddress;</span><br><span class="line">  <span class="comment">// EthereumAddress get myAddress =&gt; _myAddress;</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; walletsAddress = [<span class="string">&#x27;0xB8e56f477753f7389EEE7542996d127e28A0904A&#x27;</span>];</span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; walletsKey = [</span><br><span class="line">    <span class="string">&#x27;0x0034caae02ae2c4dff9038c190637fdbaf0296d65263f641337d62a826acfa17&#x27;</span></span><br><span class="line">  ];</span><br><span class="line">  Stage stage = Stage.start;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> balance;</span><br><span class="line"></span><br><span class="line">  WalletState() &#123;</span><br><span class="line">    stage = Stage.loading;</span><br><span class="line">    initialSetup();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> initialSetup() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      _client = Web3Client(_rpcUrl, Client(), socketConnector: () &#123;</span><br><span class="line">        <span class="keyword">return</span> IOWebSocketChannel.connect(_wsUrl).cast&lt;<span class="built_in">String</span>&gt;();</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      _abiCode = <span class="keyword">await</span> contractLinkingService</span><br><span class="line">          .getAbi(<span class="string">&quot;assets/artifacts/MyTokenEnhance.json&quot;</span>);</span><br><span class="line">      _contractAddress = <span class="keyword">await</span> contractLinkingService.getContractAddress(</span><br><span class="line">          <span class="string">&quot;assets/artifacts/MyTokenEnhance.json&quot;</span>, <span class="string">&quot;1640020727076&quot;</span>); <span class="comment">// network</span></span><br><span class="line">      _contract = <span class="keyword">await</span> contractLinkingService.getDeployedContract(</span><br><span class="line">          _abiCode, <span class="string">&quot;MyTokenEnhance&quot;</span>, _contractAddress);</span><br><span class="line">      _credentials = <span class="keyword">await</span> contractLinkingService.getCredentials(walletsKey[<span class="number">0</span>]);</span><br><span class="line">      balance = getBalance(walletsAddress[<span class="number">0</span>]);</span><br><span class="line">      stage = Stage.done;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      stage = Stage.error;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    notifyListeners();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> addWallet(<span class="built_in">String</span> address, <span class="built_in">String</span> key) &#123;</span><br><span class="line">    walletsAddress.add(address);</span><br><span class="line">    walletsKey.add(key);</span><br><span class="line">    notifyListeners();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Future&lt;<span class="keyword">void</span>&gt; getBalance(<span class="built_in">String</span> credentialAddress) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">dynamic</span>&gt; res = <span class="keyword">await</span> contractLinkingService.query(_client, _contract,</span><br><span class="line">        <span class="string">&quot;balanceOf&quot;</span>, [EthereumAddress.fromHex(credentialAddress)]);</span><br><span class="line"></span><br><span class="line">    balance = res[<span class="number">0</span>];</span><br><span class="line">    notifyListeners();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Future&lt;<span class="built_in">String</span>&gt; sendCoin(<span class="built_in">String</span> targetAddress, <span class="built_in">int</span> myAmount) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> bigAmount = BigInt.from(myAmount);</span><br><span class="line">    <span class="keyword">var</span> response = <span class="keyword">await</span> _client.sendTransaction(</span><br><span class="line">        _credentials,</span><br><span class="line">        Transaction.callContract(</span><br><span class="line">            contract: _contract,</span><br><span class="line">            function: _contract.function(<span class="string">&quot;transfer&quot;</span>),</span><br><span class="line">            parameters: [EthereumAddress.fromHex(targetAddress), bigAmount]));</span><br><span class="line">    notifyListeners();</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>states.dart:</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="string">&#x27;wallet_state.dart&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="ui"><a href="#ui" class="headerlink" title="ui"></a>ui</h2><p>home_screen.dart:</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter_form_builder/flutter_form_builder.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter_wallet/core/state/wallet_state.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter_wallet/ui/wallet_add_screen.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:provider/provider.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeScreen</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> HomeScreen(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;HomeScreen&gt; createState() =&gt; _HomeScreenState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_HomeScreenState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">HomeScreen</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _balance;</span><br><span class="line">  <span class="keyword">var</span> selectedValue;</span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; addresses = [];</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement initState</span></span><br><span class="line">    addresses = Provider.of&lt;WalletState&gt;(context, listen: <span class="keyword">false</span>).walletsAddress;</span><br><span class="line">    selectedValue = addresses[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> didChangeDependencies() &#123;</span><br><span class="line">    <span class="keyword">super</span>.didChangeDependencies();</span><br><span class="line">    _balance = Provider.of&lt;WalletState&gt;(context).balance;</span><br><span class="line">    addresses = Provider.of&lt;WalletState&gt;(context).walletsAddress;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">final</span> wallet = Provider.of&lt;WalletState&gt;(context);</span><br><span class="line">    <span class="keyword">final</span> _formKey = GlobalKey&lt;FormBuilderState&gt;();</span><br><span class="line">    TextEditingController _textController = TextEditingController();</span><br><span class="line">    TextEditingController _coinController = TextEditingController();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: <span class="keyword">const</span> Text(<span class="string">&#x27;Wallet&#x27;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Form(</span><br><span class="line">        key: _formKey,</span><br><span class="line">        child: Column(</span><br><span class="line">          children: [</span><br><span class="line">            DropdownButton&lt;<span class="built_in">String</span>&gt;(</span><br><span class="line">              isExpanded: <span class="keyword">true</span>,</span><br><span class="line">              value: selectedValue,</span><br><span class="line">              onChanged: (<span class="built_in">String?</span> newValue) &#123;</span><br><span class="line">                setState(() &#123;</span><br><span class="line">                  selectedValue = newValue;</span><br><span class="line">                  wallet.getBalance(selectedValue.toString());</span><br><span class="line">                &#125;);</span><br><span class="line">              &#125;,</span><br><span class="line">              hint: <span class="keyword">const</span> Text(<span class="string">&#x27;Selected Address&#x27;</span>),</span><br><span class="line">              items: addresses.map&lt;DropdownMenuItem&lt;<span class="built_in">String</span>&gt;&gt;((<span class="built_in">String</span> value) &#123;</span><br><span class="line">                <span class="keyword">return</span> DropdownMenuItem&lt;<span class="built_in">String</span>&gt;(</span><br><span class="line">                  value: value,</span><br><span class="line">                  child: Text(value),</span><br><span class="line">                );</span><br><span class="line">              &#125;).toList(),</span><br><span class="line">            ),</span><br><span class="line">            Text(selectedValue.toString()),</span><br><span class="line">            Text(<span class="string">&#x27;Wallet Balance: &#x27;</span> + _balance.toString()),</span><br><span class="line">            Padding(</span><br><span class="line">              padding: <span class="keyword">const</span> EdgeInsets.only(top: <span class="number">29</span>),</span><br><span class="line">              child: TextFormField(</span><br><span class="line">                controller: _textController,</span><br><span class="line">                decoration: <span class="keyword">const</span> InputDecoration(</span><br><span class="line">                  border: OutlineInputBorder(),</span><br><span class="line">                  labelText: <span class="string">&quot;Target Address&quot;</span>,</span><br><span class="line">                ),</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">            Padding(</span><br><span class="line">              padding: <span class="keyword">const</span> EdgeInsets.only(top: <span class="number">29</span>),</span><br><span class="line">              child: TextFormField(</span><br><span class="line">                controller: _coinController,</span><br><span class="line">                keyboardType: TextInputType.number,</span><br><span class="line">                decoration: <span class="keyword">const</span> InputDecoration(</span><br><span class="line">                  border: OutlineInputBorder(),</span><br><span class="line">                  labelText: <span class="string">&quot;Coin Number&quot;</span>,</span><br><span class="line">                ),</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">            TextButton(</span><br><span class="line">                onPressed: () &#123;</span><br><span class="line">                  wallet.sendCoin(</span><br><span class="line">                      _textController.text, <span class="built_in">int</span>.parse(_coinController.text));</span><br><span class="line">                  _textController.clear();</span><br><span class="line">                &#125;,</span><br><span class="line">                child: <span class="keyword">const</span> Text(<span class="string">&#x27;Send coin&#x27;</span>)),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">        onPressed: () <span class="keyword">async</span> &#123;</span><br><span class="line">          Navigator.push(context,</span><br><span class="line">              MaterialPageRoute(builder: (context) =&gt; <span class="keyword">const</span> WalletAddScreen()));</span><br><span class="line">        &#125;,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>wallet_add_screen.dart:</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter_wallet/core/state/states.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:provider/provider.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WalletAddScreen</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> WalletAddScreen(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;WalletAddScreen&gt; createState() =&gt; _WalletAddScreenState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_WalletAddScreenState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">WalletAddScreen</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">bool</span> _canSave = <span class="keyword">false</span>;</span><br><span class="line">  <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; group = &#123;</span><br><span class="line">    <span class="string">&#x27;wallet_address&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;wallet_key&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _setCanSave() &#123;</span><br><span class="line">    <span class="keyword">if</span> (group[<span class="string">&#x27;wallet_address&#x27;</span>] != <span class="keyword">null</span> &amp;&amp; group[<span class="string">&#x27;wallet_key&#x27;</span>] != <span class="keyword">null</span>) &#123;</span><br><span class="line">      setState(() =&gt; _canSave = <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">final</span> wallet = Provider.of&lt;WalletState&gt;(context);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: <span class="keyword">const</span> Text(<span class="string">&#x27;Add New Group&#x27;</span>), actions: &lt;Widget&gt;[</span><br><span class="line">        ElevatedButton(</span><br><span class="line">            child: Text(</span><br><span class="line">              <span class="string">&#x27;ADD&#x27;</span>,</span><br><span class="line">              style: TextStyle(</span><br><span class="line">                color: _canSave</span><br><span class="line">                    ? Colors.white</span><br><span class="line">                    : <span class="keyword">const</span> Color.fromRGBO(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.5</span>),</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">            onPressed: _canSave</span><br><span class="line">                ? () &#123;</span><br><span class="line">                    wallet.addWallet(</span><br><span class="line">                        group[<span class="string">&#x27;wallet_address&#x27;</span>], group[<span class="string">&#x27;wallet_key&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">                    Navigator.pop(context);</span><br><span class="line">                  &#125;</span><br><span class="line">                : <span class="keyword">null</span>)</span><br><span class="line">      ]),</span><br><span class="line">      body: Form(</span><br><span class="line">        child: ListView(</span><br><span class="line">          padding: <span class="keyword">const</span> EdgeInsets.symmetric(vertical: <span class="number">4.0</span>, horizontal: <span class="number">16.0</span>),</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            TextField(</span><br><span class="line">              decoration: <span class="keyword">const</span> InputDecoration(</span><br><span class="line">                labelText: <span class="string">&quot;Wallet Address&quot;</span>,</span><br><span class="line">              ),</span><br><span class="line">              onChanged: (<span class="built_in">String</span> value) &#123;</span><br><span class="line">                group[<span class="string">&#x27;wallet_address&#x27;</span>] = value;</span><br><span class="line">                _setCanSave();</span><br><span class="line">              &#125;,</span><br><span class="line">            ),</span><br><span class="line">            TextField(</span><br><span class="line">              decoration: <span class="keyword">const</span> InputDecoration(</span><br><span class="line">                labelText: <span class="string">&quot;Wallet Private Key&quot;</span>,</span><br><span class="line">              ),</span><br><span class="line">              onChanged: (<span class="built_in">String</span> value) &#123;</span><br><span class="line">                group[<span class="string">&#x27;wallet_key&#x27;</span>] = value;</span><br><span class="line">                _setCanSave();</span><br><span class="line">              &#125;,</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>main.dart:</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter_wallet/ui/home_screen.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:provider/provider.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;core/state/states.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(<span class="keyword">const</span> MyApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyApp(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// This widget is the root of your application.</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> ChangeNotifierProvider&lt;WalletState&gt;(</span><br><span class="line">      create: (_) =&gt; WalletState(),</span><br><span class="line">      child: MaterialApp(</span><br><span class="line">        title: <span class="string">&#x27;Flutter Demo&#x27;</span>,</span><br><span class="line">        theme: ThemeData(</span><br><span class="line">          primarySwatch: Colors.blue,</span><br><span class="line">        ),</span><br><span class="line">        home: <span class="keyword">const</span> HomeScreen(),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><p><img data-src="/2021/flutter/1ee6ee03be86/2021-12-21-01-30-10.png"></p>
<p><img data-src="/2021/flutter/1ee6ee03be86/2021-12-21-01-30-40.png"></p>
<p><img data-src="/2021/flutter/1ee6ee03be86/app-test.gif" alt="test"></p>
]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>solidity</tag>
        <tag>flutter</tag>
        <tag>dapp</tag>
        <tag>truffle</tag>
        <tag>ganache</tag>
      </tags>
  </entry>
  <entry>
    <title>使用flutter來建立dapp</title>
    <url>/2021/flutter/c2c8ee41f138/</url>
    <content><![CDATA[<h1 id="使用flutter來建立dapp"><a href="#使用flutter來建立dapp" class="headerlink" title="使用flutter來建立dapp"></a>使用flutter來建立dapp</h1><hr>
<h2 id="Create-the-Smart-Contract"><a href="#Create-the-Smart-Contract" class="headerlink" title="Create the Smart Contract"></a>Create the Smart Contract</h2><p>現在我們開始創建一個簡易合約:</p>
<a href="/2021/solidity/bfbd39565543/" title="solidity hello world smart contract">solidity hello world smart contract</a>

<p>啟動本地端:</p>
<blockquote>
<p>port=&gt;8545</p>
</blockquote>
<p><img data-src="/2021/flutter/c2c8ee41f138/2021-12-03-02-03-15.png" alt="ganache"></p>
<p>接下來要把合約部署在本地測試端:</p>
<p><img data-src="/2021/flutter/c2c8ee41f138/2021-12-03-01-56-19.png" alt="Solidity"></p>
<p><img data-src="/2021/flutter/c2c8ee41f138/2021-12-03-01-56-55.png" alt="migration"></p>
<p>佈署到的地址:</p>
<p><img data-src="/2021/flutter/c2c8ee41f138/2021-12-03-02-07-20.png" alt="migrate address"></p>
<p>compile完後得到一個json檔:</p>
<p>而在裡面有個ABI，是告訴我們如何與合約溝通的接口介面</p>
<blockquote>
<p>web3要和智能合約溝通所需要的是ABI，也就是二進制接口(Application Binary Interface)<br>而ABI是以JSON來表達合約裡的方法，告訴web3如何以合約理解的方式格式化函數去做調用</p>
</blockquote>
<p><img data-src="/2021/flutter/c2c8ee41f138/2021-12-03-01-59-23.png" alt="Json"></p>
<p>把他加入到flutter的assets中</p>
<p><img data-src="/2021/flutter/c2c8ee41f138/2021-12-03-02-00-02.png" alt="assets"></p>
<p><img data-src="/2021/flutter/c2c8ee41f138/2021-12-03-02-00-52.png" alt="pub"></p>
<hr>
<h2 id="Create-DAPP"><a href="#Create-DAPP" class="headerlink" title="Create DAPP"></a>Create DAPP</h2><p>Add package:</p>
<p><img data-src="/2021/flutter/c2c8ee41f138/2021-12-03-01-54-15.png" alt="package list"></p>
<p>The struct of folder:</p>
<p><img data-src="/2021/flutter/c2c8ee41f138/2021-12-03-01-54-50.png" alt="folder struct"></p>
<p>Add contract_linking:</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContractLinking</span> <span class="keyword">extends</span> <span class="title">ChangeNotifier</span> </span>&#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Now add some feature:</p>
</blockquote>
<p>contract_linking.dart:</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:convert&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/services.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:http/http.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:web3dart/web3dart.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:web_socket_channel/io.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContractLinking</span> <span class="keyword">extends</span> <span class="title">ChangeNotifier</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> _rpcUrl = <span class="string">&quot;http://10.0.2.2:8545&quot;</span>;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> _wsUrl = <span class="string">&quot;ws://10.0.2.2:8545/&quot;</span>;</span><br><span class="line">  <span class="comment">// final String _privateKey =</span></span><br><span class="line">  <span class="comment">//     &quot;0x01d3fe7ae54ef4d39facb006cab009f9ebb412d1dff171303704b43ceae49736&quot;;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">late</span> Web3Client _client;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">late</span> <span class="built_in">String</span> _abiCode;</span><br><span class="line">  <span class="keyword">late</span> EthereumAddress _contractAddress;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">late</span> DeployedContract _contract;</span><br><span class="line">  <span class="keyword">late</span> ContractFunction _text;</span><br><span class="line">  <span class="built_in">String</span> message = <span class="string">&#x27;No message&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  ContractLinking() &#123;</span><br><span class="line">    initialSetup();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  initialSetup() <span class="keyword">async</span> &#123;</span><br><span class="line">    _client = Web3Client(_rpcUrl, Client(), socketConnector: () &#123;</span><br><span class="line">      <span class="keyword">return</span> IOWebSocketChannel.connect(_wsUrl).cast&lt;<span class="built_in">String</span>&gt;();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> getAbi();</span><br><span class="line">    <span class="keyword">await</span> getDeployedContract();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Future&lt;<span class="keyword">void</span>&gt; getAbi() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="comment">// Reading the contract abi</span></span><br><span class="line">    <span class="built_in">String</span> abiStringFile =</span><br><span class="line">        <span class="keyword">await</span> rootBundle.loadString(<span class="string">&quot;assets/contracts/HelloWorld.json&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> jsonAbi = jsonDecode(abiStringFile);</span><br><span class="line">    _abiCode = jsonEncode(jsonAbi[<span class="string">&quot;abi&quot;</span>]);</span><br><span class="line"></span><br><span class="line">    _contractAddress = EthereumAddress.fromHex(</span><br><span class="line">        jsonAbi[<span class="string">&quot;networks&quot;</span>][<span class="string">&quot;1638459988787&quot;</span>][<span class="string">&quot;address&quot;</span>]); <span class="comment">// See HelloWorld.json</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Future&lt;<span class="keyword">void</span>&gt; getDeployedContract() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="comment">//  Telling Web3dart where our contract is declared.</span></span><br><span class="line">    _contract = DeployedContract(</span><br><span class="line">        ContractAbi.fromJson(_abiCode, <span class="string">&quot;HelloWorld&quot;</span>), _contractAddress);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Extracting the functions, declared in contract.</span></span><br><span class="line">    _text = _contract.function(<span class="string">&#x27;sayHello&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Future&lt;<span class="keyword">void</span>&gt; sayHelloWorld() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> text =</span><br><span class="line">        <span class="keyword">await</span> _client.call(contract: _contract, function: _text, params: []);</span><br><span class="line">    message = text[<span class="number">0</span>];</span><br><span class="line">    notifyListeners();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我們部署的合約地址<br><img data-src="/2021/flutter/c2c8ee41f138/2021-12-03-02-06-09.png" alt="addr"></p>
<p>In UI, we add some screen:</p>
<p>home_screen.dart:</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter_web3_app/core/contract_linking.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:provider/provider.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeScreen</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> HomeScreen(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// Getting the value and object or contract_linking</span></span><br><span class="line">    <span class="keyword">final</span> contractLink = Provider.of&lt;ContractLinking&gt;(context);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: <span class="keyword">const</span> Text(<span class="string">&quot;Smart Contract Test!&quot;</span>),</span><br><span class="line">        centerTitle: <span class="keyword">true</span>,</span><br><span class="line">      ),</span><br><span class="line">      body: Container(</span><br><span class="line">        padding: <span class="keyword">const</span> EdgeInsets.symmetric(horizontal: <span class="number">20</span>),</span><br><span class="line">        child: Center(</span><br><span class="line">          child: SingleChildScrollView(</span><br><span class="line">            child: Form(</span><br><span class="line">              child: Column(</span><br><span class="line">                children: [</span><br><span class="line">                  Row(</span><br><span class="line">                    mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">                    children: [</span><br><span class="line">                      Text(</span><br><span class="line">                        contractLink.message,</span><br><span class="line">                        style: <span class="keyword">const</span> TextStyle(</span><br><span class="line">                            fontWeight: FontWeight.bold,</span><br><span class="line">                            fontSize: <span class="number">52</span>,</span><br><span class="line">                            color: Colors.tealAccent),</span><br><span class="line">                      ),</span><br><span class="line">                    ],</span><br><span class="line">                  ),</span><br><span class="line">                ],</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">        onPressed: contractLink.sayHelloWorld,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>screens.dart:</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="string">&#x27;./home_screen.dart&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>main.dart:</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter_web3_app/core/contract_linking.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter_web3_app/ui/screens/screens.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:provider/provider.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(<span class="keyword">const</span> MyApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyApp(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// This widget is the root of your application.</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> ChangeNotifierProvider&lt;ContractLinking&gt;(</span><br><span class="line">      create: (_) =&gt; ContractLinking(),</span><br><span class="line">      child: MaterialApp(</span><br><span class="line">        title: <span class="string">&quot;Hello World&quot;</span>,</span><br><span class="line">        theme: ThemeData(</span><br><span class="line">          brightness: Brightness.dark,</span><br><span class="line">          primaryColor: Colors.cyan[<span class="number">400</span>],</span><br><span class="line">        ),</span><br><span class="line">        home: <span class="keyword">const</span> HomeScreen(),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>現在，我們啟動flutter emulator:<br><img data-src="/2021/flutter/c2c8ee41f138/2021-12-03-02-08-07.png" alt="emulator launch"></p>
<p>我們按一下Button，會發現到:</p>
<p><img data-src="/2021/flutter/c2c8ee41f138/2021-12-03-02-08-50.png" alt="click"></p>
]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>solidity</tag>
        <tag>flutter</tag>
        <tag>dapp</tag>
      </tags>
  </entry>
  <entry>
    <title>flutter lifecycle</title>
    <url>/2021/flutter/f95ae0025bf4/</url>
    <content><![CDATA[<h1 id="關於flutter的lifecycle"><a href="#關於flutter的lifecycle" class="headerlink" title="關於flutter的lifecycle"></a>關於flutter的lifecycle</h1><p>最近在學習有關於flutter widget中的state內交互以及生命週期。整理了一下資料並把他做成筆記。</p>
<p><img data-src="/2021/flutter/f95ae0025bf4/life-cycle.drawio.png"><br><img data-src="/2021/flutter/f95ae0025bf4/2021-12-13-10-08-39.png"></p>
<p>Flutter的三種tree:</p>
<blockquote>
<p>1.Widget：UI 的不可變描述，並還描述了Element的配置</p>
<p>2.Element：在特定位置的小部件樹中的小部件實例化，並進行狀態管理</p>
<p>3.Render：處理大小、繪畫和其他低級的東西</p>
<p>Widget樹只是一個藍圖；元素樹進行比較；渲染樹​​進行實際渲染</p>
</blockquote>
<p>三大類Widget:</p>
<p><a href="https://juejin.cn/post/6886361064330493960#heading-3">Flutter Provider 原理解析</a><br><img data-src="/2021/flutter/f95ae0025bf4/2021-12-18-17-07-45.png" alt="Flutter Provider 原理解析"></p>
<ul>
<li><p>Component Widget: 組合類Widget，大都直接或間接繼承自StatelessWidget或StatefulWidget。</p>
</li>
<li><p>Proxy Widget:本身不涉及Widget內部邏輯，只為”子Widget”提供一些附加的中間功能。(InheritedWidget用在Descendant Widgets間傳遞共享訊息；ParentDataWidget用在配置Descendant Renderer Widget的布局信息)</p>
</li>
<li><p>Renderer Widget: 直接參與後面的Layout、Paint流程。而只有Renderer Widget有與之一一對應的Render Object</p>
</li>
</ul>
<hr>
<p>Flutter Widget生命周期：</p>
<blockquote>
<p>1、組件實例化後添加到render tree，即Navigator.push</p>
<p>(構造函數-&gt;initState-&gt;didChangeDependencies-&gt; Widget build，此時頁面加載完成)</p>
<p>2、狀態State改變，也就是開新的widget或其依賴的上級widget發生改變</p>
<p>(didUpdateWidget-&gt;Widget build，頁面刷新)</p>
<p>3、從render tree移除，即Navigator.pop</p>
<p>(deactivate-&gt;dispose，組件移除並銷毀)</p>
</blockquote>
<p>Flutter打開和關閉widget時，都是先處理即將顯示的介面。</p>
<hr>
<h2 id="Stateful"><a href="#Stateful" class="headerlink" title="Stateful"></a>Stateful</h2><p>當我們開始渲染時，最先呼叫構造函數constructor(當呼叫這個widget時就會自動調用並做初始化)</p>
<p>createState()</p>
<blockquote>
<p>建立StatefulWidget時，被呼叫。</p>
</blockquote>
<p>initState():</p>
<blockquote>
<p>將我們的widget插入到我們的渲染樹中</p>
</blockquote>
<p>didChangeDependencies()-&gt;void</p>
<blockquote>
<p>在初始化initState後，會被呼叫</p>
<p>顯示/關閉其他widget</p>
<p>InheritedWidget發生變化時，會被呼叫。</p>
</blockquote>
<p>didUpdateWidget()-&gt;void</p>
<blockquote>
<p>上級結點rebuild widget時，即上級widget state發生變化時會觸發子widget執行此函數</p>
<p>build後、hot reload後被呼叫</p>
<p>parent widget呼叫setState，child widget的didUpdateWidget被呼叫。</p>
</blockquote>
<p>deactivate()-&gt;void</p>
<blockquote>
<p>在打開新的widget或回到這個widget時會執行。在Element Tree中，State Widget的位置發生了變化，此時需暫時移除State Widget時，才會被呼叫。例如: 頁面切換時</p>
<p>在某些情況下，框架會將 State 對象重新插入到樹的另一部分（例如，如果包含此 State 對象的子樹由於使用 GlobalKey 而從樹中的一個位置移植到另一個位置）。並調用 activate 以讓 State 對像有機會重新獲取它在停用時釋放的任何資源。然後它還會調用 build 來讓 State 對像有機會適應它在樹中的新位置。</p>
<p>如果框架確實重新插入了這個子樹，它會在從樹中刪除子樹的動畫幀結束之前這樣做。</p>
</blockquote>
<p>dispose()-&gt;void</p>
<blockquote>
<p>在執行Navigator.pop後會調用該方法，表示組建已銷毀</p>
<p>State Widget永遠銷毀時，才會被呼叫</p>
</blockquote>
<p>activate() → void</p>
<blockquote>
<p>在通過deactivate 刪除此對像後重新插入到樹中時調用</p>
</blockquote>
<p>reassemble()-&gt;void</p>
<blockquote>
<p>在調試期間重新組裝應用程序時調用，例如hor reload。release版本不会执行该函数。</p>
</blockquote>
<p>setState(VoidCallback fn) → void</p>
<blockquote>
<p>通知框架這個對象的內部狀態發生了變化。並且觸發build來重繪Widget</p>
</blockquote>
<h2 id="Stateless"><a href="#Stateless" class="headerlink" title="Stateless"></a>Stateless</h2><p>不與Widget互動，Lifecycle:</p>
<p>1.createElement() → StatelessElement</p>
<blockquote>
<p>創建一個StatelessElement來管理這個widget在樹中的位置。</p>
</blockquote>
<p>2.build(BuildContext context) → Widget</p>
<blockquote>
<p>描述此widget代表的用戶界面部分</p>
</blockquote>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://api.flutter.dev/flutter/widgets/State-class.html">Flutter State Class</a></li>
<li><a href="https://api.flutter.dev/flutter/widgets/Navigator-class.html">Flutter Navigator Class</a></li>
<li><a href="https://blog.duicode.com/3108.html?fbclid=IwAR3yvdv5o3Nd2_3YRvBAqZVF4mN1Aef36WL1cE1LIfmC_SW26KZI8GWWNNU">Flutter中的生命周期</a></li>
<li><a href="https://www.cnblogs.com/ssjf/p/11759366.html">Flutter的生命週期</a></li>
<li><a href="https://www.youtube.com/watch?v=996ZgFRENMs">How Flutter renders Widgets</a></li>
</ul>
]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>關於Flutter空安全</title>
    <url>/2021/flutter/a929576e2db7/</url>
    <content><![CDATA[<h1 id="關於Flutter空安全"><a href="#關於Flutter空安全" class="headerlink" title="關於Flutter空安全"></a>關於Flutter空安全</h1><p>從官網的解說中我們能看到，在null-safety推出前，靜態類型系統允許所有類型的表達式中每一處都有null<br>(Null類型被視作是所有類型的子類)</p>
<p><img data-src="/2021/flutter/a929576e2db7/2021-12-14-02-10-29.png"></p>
<blockquote>
<p>問題:</p>
<p>類型會定義一些操作對象(ex. getters、setters、方法和操作符)，在表達式中使用。當你調用時，有個問題在於<strong>null值並沒有那些類型定義的任何一個方法</strong>(ex.List類型調用add()、int類型調用+…等)</p>
<p>導致當null傳遞至其他類型的表達式時，任何操作都有可能失敗。(而這錯誤都源自於<strong>嘗試在null類型上尋找一個不存在的方法或屬性</strong>)</p>
</blockquote>
<p>為解決null在那邊找不存在的方法或屬性，null safety改變了類型的層級結構來解決這個問題</p>
<p><img data-src="/2021/flutter/a929576e2db7/2021-12-14-02-19-24.png"></p>
<blockquote>
<p>此時，Null 不再被視作所有類型的子類，也就是<strong>其他類型都默認不可空</strong>，除了<strong>特殊Null類型允許傳遞null值</strong>，其他則不允許。(ex.如果變量式string類型，就必須包含一個字符串)</p>
</blockquote>
<p>如果我們<strong>想要讓他可空</strong>，也就是原有類型加Null的組合類型呢? 可以使用? (ex. String?就是String|Null的縮寫)</p>
<p><img data-src="/2021/flutter/a929576e2db7/2021-12-14-02-29-06.png"></p>
<p>keyword:</p>
<ul>
<li><p>可空?<br>在程式裡面，有一些引數變數並不一定為必傳，又或是類型不確定，可能有空，此時可以用?來標註</p>
</li>
<li><p>非空!<br>當使用可空變數時，當我們執行一個method，而這個方法可能是非空，導致編譯器報錯。我們可以使用!告訴編譯器，我確認這個值不會空</p>
</li>
<li><p>延遲初始化late</p>
</li>
</ul>
<p>在程式中，我們可能需要通過method來初始化一個成員變數，我們發現變數可能會報錯，他會要求你需要對他做初始化(<strong>定義的變數沒有賦值時</strong>)。如果我們還沒想要做初始化，我們能加個?來表達他此時可空<br>但如果我們後面要用到他時，他會要求你去對Null進行判斷，這樣做有時會出問題<br>(某些情境下，我們要成員變數需要method來初始化(ex.constructor)。但我們能保證後續的使用總是在其初始化之後。那麼在這用?是不好的)<br>所以此時我們能用late來告訴編譯器，這個非空變數，稍後會去做初始化</p>
<ul>
<li>參數不可空required</li>
</ul>
<hr>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://dart.cn/null-safety/understanding-null-safety#using-nullable-types">深入理解空安全</a></li>
</ul>
]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>flutter渲染原理與過程</title>
    <url>/2021/flutter/7d9cf094f2f7/</url>
    <content><![CDATA[<h1 id="flutter渲染原理與過程"><a href="#flutter渲染原理與過程" class="headerlink" title="flutter渲染原理與過程"></a>flutter渲染原理與過程</h1><h2 id="Flutter-UI生成過程"><a href="#Flutter-UI生成過程" class="headerlink" title="Flutter UI生成過程"></a>Flutter UI生成過程</h2><p>Flutter UI的生成與渲染:<br><img data-src="/2021/flutter/7d9cf094f2f7/flutter-ui-render.png" alt="flutter ui render"></p>
<p>我們透過flutter engine來與Native來溝通，並將接收到的VSync訊號給發送到給Framework，並開始進行UI的生成與渲染</p>
<p>Flutter的三棵樹:<br><img data-src="/2021/flutter/7d9cf094f2f7/2021-12-25-20-16-41.png" alt="Three Tree"></p>
<hr>
<p>而UI的顯示是一幀一幀的，每繪製一次，則稱其為一幀。而flutter中的engine通過VSync信號不斷的觸發每一幀繪製</p>
<p>渲染的幀數周期:<br><img data-src="/2021/flutter/7d9cf094f2f7/flutter-vsync-cycle.png" alt="flutter fps cycle"></p>
<p>如果需要進行繪製，如何監聽VSync?</p>
<blockquote>
<p>透過Flutter Engine的ScheduleFrame()來註冊VSync信號回調，當VSync信號來的時候就會收到通知，然後就會開始進行渲染繪製</p>
</blockquote>
<h2 id="Flutter在Android上渲染過程"><a href="#Flutter在Android上渲染過程" class="headerlink" title="Flutter在Android上渲染過程"></a>Flutter在Android上渲染過程</h2><p><img data-src="/2021/flutter/7d9cf094f2f7/Flutter-render-frame.png" alt="flutter ui generator"></p>
<p>Platform channel:<br><img data-src="/2021/flutter/7d9cf094f2f7/2021-12-25-20-18-11.png" alt="Platform channels"></p>
<ol>
<li>Flutter的Engine藉ScheduleFrame()來註冊Vsync信號，而Engine與Framework(Dart)是藉由Window來進行構通</li>
<li>Engine收到Vsync信號，通過Window的onBeginFrame和onDrawFrame來進行回調，此時信號已經回調到Framework</li>
<li>Framework將Widget構建出相對應的Element Tree和RenderObject Tree</li>
<li>將RenderObject進行layout和paint，最後把繪製的結果輸出在Layer上</li>
<li>Framework通過Window的render方法回到Engine，Engine再向GPU Thread提交繪製任務並渲染</li>
</ol>
<h1 id="Flutter架構"><a href="#Flutter架構" class="headerlink" title="Flutter架構"></a>Flutter架構</h1><p>Flutter架構:<br><img data-src="/2021/flutter/7d9cf094f2f7/2021-12-25-20-14-01.png" alt="flutter arch-overview"></p>
<p>Flutter Engine本身不串建管理Thread，Flutter Engine Thread的建立和管理是由embedder負責。(Embeder指的是將Engine移植到平台的middleware)</p>
<p>並且Engine要求Embeder提供四個Task Runner:<br>1.Platform Task Runner<br>2.UI Task Runner Thread(Dart Runner)<br>3.GPU Task Runner<br>4.IO Task Runner</p>
<h2 id="Platform-Task-Runner"><a href="#Platform-Task-Runner" class="headerlink" title="Platform Task Runner"></a>Platform Task Runner</h2><p>當一個Flutter應用啟動時會創建一個Engine實例，Engine創建的時候會創建一個Thread來供Platform Runner使用。(一個Engine對應一個Platform Runner，而我們能同時啟動多個Engine實例，每個Runner跑在各自的Thread。)</p>
<p>Platform Runner所在的Thread進行主要的操作:<br>1.與Engine的交互(接口调用)<br>2.處理來自平台的消息</p>
<h2 id="UI-Task-Runner"><a href="#UI-Task-Runner" class="headerlink" title="UI Task Runner"></a>UI Task Runner</h2><p>被Flutter Engine用來執行Dart root isolate (Root isolate運行應用的main code)</p>
<p>Engine做的事情:</p>
<ul>
<li>Root isolate通知Flutter Engine有幀需要渲染</li>
<li>Flutter Engine通知平台，需要在下個Vsync的時候得到通知</li>
<li>平台等待下一個Vsync</li>
<li>對創建的對象和Widgets進行Layout並產生一個Layer Tree，並且將Tree傳給Engine(沒進行任何光柵化，僅生成需要繪製內容的描述)</li>
<li>創建或更新Tree</li>
</ul>
<h2 id="GPU-Task-Runner"><a href="#GPU-Task-Runner" class="headerlink" title="GPU Task Runner"></a>GPU Task Runner</h2><p>用來執行設備GPU的相關調用，負責將Layer Tree提供的信息轉化為實際的GPU指令，並且配置所需的GPU資源</p>
<h2 id="IO-Task-Runner"><a href="#IO-Task-Runner" class="headerlink" title="IO Task Runner"></a>IO Task Runner</h2><p>有一些Thread的必要操作是比較耗時間的，比如IO，而這些操作我們使用IO Runner處理。</p>
<blockquote>
<p>從圖片存儲（比如磁盤）中讀取壓縮的圖片格式，並將圖片數據進行處理為GPU Runner的渲染做好準備</p>
<p>Texture準備過程中，IO Runner首先讀取壓縮的圖片二進制數據（比如PNG，JPEG），將其解壓轉換成GPU能夠處理的格式然後將數據上傳到GPU</p>
</blockquote>
<hr>
<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><p><a href="https://docs.flutter.dev/resources/architectural-overview">Flutter architectural overview</a><br><a href="https://juejin.cn/post/6844903620064837645#heading-1">深入理解Flutter引擎线程模式</a><br><a href="https://book.flutterchina.club/chapter14/flutter_app_startup.html#_14-3-1-%E5%90%AF%E5%8A%A8">Flutter启动流程和渲染管线</a></p>
]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
        <tag>statement</tag>
        <tag>render</tag>
      </tags>
  </entry>
  <entry>
    <title>使用flutter來製作過渡頁</title>
    <url>/2021/flutter/951debf887fa/</url>
    <content><![CDATA[<h1 id="使用flutter來製作過渡頁"><a href="#使用flutter來製作過渡頁" class="headerlink" title="使用flutter來製作過渡頁"></a>使用flutter來製作過渡頁</h1><blockquote>
<p>當app啟動時，有些app會有一個過渡的啟動頁面(Splash page)<br>今天我們就來簡單去實現</p>
</blockquote>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><p><img data-src="/2021/flutter/951debf887fa/2021-12-12-13-41-49.png" alt="structure"></p>
<p>main:</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:slash_screen/splash_screen.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(<span class="keyword">const</span> MyApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyApp(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// This widget is the root of your application.</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;Flutter Demo&#x27;</span>,</span><br><span class="line">      theme: ThemeData(</span><br><span class="line">        primarySwatch: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">      home: SplashScreen(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>home_screen:</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeScreen</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> HomeScreen(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">const</span> Scaffold(</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Text(<span class="string">&#x27;Home Page&#x27;</span>),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>splash_screen:</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:async&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:slash_screen/home_screen.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SplashScreen</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> SplashScreen(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;SplashScreen&gt; createState() =&gt; _SplashScreenState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_SplashScreenState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">SplashScreen</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> _time = <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">late</span> Timer _timer;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    startTimer();</span><br><span class="line">    _navToPage();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    _timer.cancel();</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//跳轉頁面</span></span><br><span class="line">  _navToPage() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> Future.delayed(</span><br><span class="line">      <span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">5</span>),</span><br><span class="line">    );</span><br><span class="line">    Navigator.pushReplacement(</span><br><span class="line">      context,</span><br><span class="line">      MaterialPageRoute(</span><br><span class="line">        builder: (context) =&gt; HomeScreen(),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 計數器</span></span><br><span class="line">  startTimer() &#123;</span><br><span class="line">    _timer = Timer.periodic(</span><br><span class="line">      <span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">1</span>),</span><br><span class="line">      (Timer timer) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_time == <span class="number">0</span>) &#123;</span><br><span class="line">          setState(() &#123;</span><br><span class="line">            timer.cancel();</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          setState(() &#123;</span><br><span class="line">            _time--;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Container(</span><br><span class="line">          child: Text(</span><br><span class="line">            <span class="string">&#x27;Splash and time <span class="subst">$_time</span>&#x27;</span>,</span><br><span class="line">            style: <span class="keyword">const</span> TextStyle(</span><br><span class="line">              fontSize: <span class="number">24</span>,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h2><p><img data-src="/2021/flutter/951debf887fa/splash_screen.gif" alt="splash"></p>
]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
        <tag>splash</tag>
      </tags>
  </entry>
  <entry>
    <title>flutter的狀態管理2</title>
    <url>/2021/flutter/82add4d40d95/</url>
    <content><![CDATA[<h1 id="flutter的狀態管理2"><a href="#flutter的狀態管理2" class="headerlink" title="flutter的狀態管理2"></a>flutter的狀態管理2</h1><h2 id="StatelessWidget"><a href="#StatelessWidget" class="headerlink" title="StatelessWidget"></a>StatelessWidget</h2><p>Provider</p>
<p>InheritedWidget能夠與它的子孫Widget建立依賴關係，並且當InheritedWidget資料發生變化時，可以自動更新有依賴它的子孫Widget，而Provider利用這一點來解決跨widget狀態共享的問題</p>
<blockquote>
<p>將需要跨widget 共享的狀態存在InheritedWidget中，然後在子widget 引用InheritedWidget即可</p>
</blockquote>
<p>主要功能</p>
<ul>
<li>数据共享</li>
<li>局部刷新</li>
</ul>
<p>建立一個Item，用於表示商品信息<br>cart_item.dart：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line">  Item(<span class="keyword">this</span>.price, <span class="keyword">this</span>.count);</span><br><span class="line">  <span class="built_in">double</span> price; </span><br><span class="line">  <span class="built_in">int</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定義一個保存購物車內商品資料的CartModel類<br>cart_model.dart：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:collection&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;cart_item.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CartModel</span> <span class="keyword">extends</span> <span class="title">ChangeNotifier</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;Item&gt; _items = [];</span><br><span class="line"></span><br><span class="line">  UnmodifiableListView&lt;Item&gt; <span class="keyword">get</span> items =&gt; UnmodifiableListView(_items);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">double</span> <span class="keyword">get</span> totalPrice =&gt;</span><br><span class="line">      _items.fold(<span class="number">0</span>, (value, item) =&gt; value + item.count * item.price);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> add(Item item) &#123;</span><br><span class="line">    _items.add(item);</span><br><span class="line">    notifyListeners();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用provider，在widget上建立監聽、訂閱，達成共享狀態資訊</p>
<p>main.dart：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:provider/provider.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:provider_tutorial/cart_model.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;cart_item.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(ChangeNotifierProvider(</span><br><span class="line">    create: (context) =&gt; CartModel(),</span><br><span class="line">    child: MyApp(),</span><br><span class="line">  ));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;Flutter Demo&#x27;</span>,</span><br><span class="line">      theme: ThemeData(</span><br><span class="line">        primarySwatch: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">      home: MyHomePage(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomePage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">&#x27;Flutter Demo Home Page&#x27;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Column(</span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            Consumer&lt;CartModel&gt;(</span><br><span class="line">              builder: (context, cartModel, child) =&gt; Text(</span><br><span class="line">                <span class="string">&#x27;總價：<span class="subst">$&#123;cartModel.totalPrice&#125;</span>&#x27;</span>,</span><br><span class="line">                style: Theme.of(context).textTheme.headline5,</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">            Builder(builder: (context) &#123;</span><br><span class="line">              <span class="keyword">return</span> RaisedButton(</span><br><span class="line">                child: Text(<span class="string">&quot;添加商品&quot;</span>),</span><br><span class="line">                onPressed: () &#123;</span><br><span class="line">                  <span class="keyword">var</span> counter = context.read&lt;CartModel&gt;();</span><br><span class="line">                  counter.add(Item(<span class="number">10.0</span>, <span class="number">1</span>));</span><br><span class="line">                &#125;,</span><br><span class="line">              );</span><br><span class="line">            &#125;)</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>應用與類型:</p>
<ul>
<li><strong>Provider.of</strong></li>
</ul>
<p>有的時候你不需要Model中的資料來改變UI，但是你可能還是需要使用該數據，比如，清空購物車的所有商品，它不需要顯示購物車裡的內容，只要調用clear()方法</p>
<p>此時我們可以使用Provider.of，並且將listen設置為false，這樣就可以使用特定數據，又不會讓整體 UI 框架重構</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在build 方法中使用代碼，當notifyListeners被調用的時候，並不會使widget被重構</span></span><br><span class="line">Provider.of&lt;CartModel&gt;(context, listen: <span class="keyword">false</span>).removeAll();</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>建立新的物件</strong></li>
</ul>
<p>想讓某個物件資料( 變量 ) 能夠被一個widget 以及其子widget 引用，我們可以使用Provider的建構create來建立所要的物件widget</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Provider(</span><br><span class="line">  create: (_) =&gt; MyModel(), <span class="comment">//所要共享的物件資料</span></span><br><span class="line">  child: ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>如果要將<strong>隨時間變化的變量</strong>傳遞給對象，請考慮使用ProxyProvider:</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> count;</span><br><span class="line"></span><br><span class="line">ProxyProvider0(</span><br><span class="line">  update: (_, __) =&gt; MyModel(count),</span><br><span class="line">  child: ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>重複使用已存在的物件</strong></li>
</ul>
<p>想使用已建立的Provider 物件，則使用Provider的建構函數.value</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">MyChangeNotifier variable;</span><br><span class="line"></span><br><span class="line">ChangeNotifierProvider.value(</span><br><span class="line">  value: variable,</span><br><span class="line">  child: ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>讀取Provider中的資料</strong></li>
</ul>
<p>最簡單的讀取資料的方式就是使用BuildContext的擴展方法：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 讓widget 去監聽共享資料 T 的變化</span></span><br><span class="line">context.watch&lt;T&gt;()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接返回 T ，而不去監聽它的變化</span></span><br><span class="line">context.read&lt;T&gt;()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 讓widget 可以只去監聽 T 的部分變化</span></span><br><span class="line">context.select&lt;T, R&gt;(R cb(T value)) </span><br></pre></td></tr></table></figure>

<p>當然也可以使用我們之前講的靜態方法Provider.of<T>(context)，它和watch/read的行為很像，這也是在上面擴展方法出現之前，我們獲取數據的方式之一</p>
<p>這些方法將從傳遞過來的BuildContext相關的widget 開始查詢它的widget tree，並返回找到的符合類型 T 的最近變量 ( 如果未找到則拋出異常 )</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Text(</span><br><span class="line">      <span class="comment">// 不要忘記將想要獲取的對像類型傳遞給`watch`</span></span><br><span class="line">      context.watch&lt;<span class="built_in">String</span>&gt;(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>dispose</strong></li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> Disposer&lt;T&gt; = <span class="keyword">void</span> <span class="built_in">Function</span>(BuildContext context, T value);</span><br></pre></td></tr></table></figure>

<p>Provider提供了dispose的回調，當Provider 所在節點被移除的時候，它就會啟動Disposer<T>，然後我們便可以在這裡釋放資源</p>
<p>在之前使用過BLoC的經驗，我們遇到過一個問題，BloC 使用了觀察者模式，它旨在替代StatefulWidget，然而大量的流使用完畢之後必須close 掉，以釋放資源，但是應該在什麼時候釋放資源呢？而StatelessWidget並沒有類似於dispose 的方法，讓我們不得不為了釋放資源而使用StatefulWidget，然而Provider則為我們解決了這一點提供了dispose的回調</p>
<p>我們有一個 BLoC</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleBLoC</span> </span>&#123;</span><br><span class="line">  StreamController&lt;<span class="built_in">String</span>&gt; _data = StreamController&lt;<span class="built_in">String</span>&gt;.broadcast();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> data =&gt; _data.stream;</span><br><span class="line"></span><br><span class="line">  doSomething(<span class="built_in">String</span> text) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  dispose() &#123;</span><br><span class="line">    _data.close();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我們想要提供這個BLoC卻又不想使用StatefulWidget，此時可以透過Provider使用</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Provider(</span><br><span class="line">    create:(_) =&gt; ExampleBLoC(),</span><br><span class="line">    dispose:(_, ExampleBLoC bloc) =&gt; bloc.dispose(), <span class="comment">//在dispose 回調中關閉不再使用的流，即解決了資源釋放的問題    </span></span><br><span class="line">)  </span><br></pre></td></tr></table></figure>

<p>1.<strong>Selector</strong></p>
<p>相當於Consumer，可以在特定值改變時，再去重新構建widget</p>
<p>當List 長度改變時，才重新構建widget：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Selector&lt;<span class="built_in">List</span>, <span class="built_in">int</span>&gt;(</span><br><span class="line">  selector: (_, list) =&gt; list.length,</span><br><span class="line">  builder: (_, length, __) &#123;</span><br><span class="line">    <span class="keyword">return</span> Text(<span class="string">&#x27;<span class="subst">$length</span>&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>2.<strong>MultiProvider</strong></p>
<p>將多個Provider 合併成一個widget:</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">MultiProvider(</span><br><span class="line">  providers: [</span><br><span class="line">    Provider&lt;Something&gt;(create: (_) =&gt; Something()),</span><br><span class="line">    Provider&lt;SomethingElse&gt;(create: (_) =&gt; SomethingElse()),</span><br><span class="line">    Provider&lt;AnotherThing&gt;(create: (_) =&gt; AnotherThing()),</span><br><span class="line">  ],</span><br><span class="line">  child: someWidget,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>3.<strong>ProxyProvider</strong></p>
<p>將多個provider裡個別共享的值，整合成一個新對象，並將結果發送給外層的provider，當所依賴的多個provider 的任一個發生變化時，此新對象都會更新</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  <span class="keyword">return</span> MultiProvider(</span><br><span class="line">    providers: [</span><br><span class="line">      ChangeNotifierProvider(create: (_) =&gt; Counter()),</span><br><span class="line">      <span class="comment">// ProxyProvider vs ProxyProvider2 vs ProxyProvider3，… 類別名後面的數字是ProxyProvider依賴其他providers的數量</span></span><br><span class="line">      ProxyProvider&lt;Counter, Translations&gt;(</span><br><span class="line">        update: (_, counter, __) =&gt; Translations(counter.value),</span><br><span class="line">      ),</span><br><span class="line">    ],</span><br><span class="line">    child: Foo(),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Translations</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Translations(<span class="keyword">this</span>._value);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> _value;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">String</span> <span class="keyword">get</span> title =&gt; <span class="string">&#x27;You clicked <span class="subst">$_value</span> times&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4.<strong>ChangeNotifierProvider</strong></p>
<blockquote>
<p>ListenableProvider和ChangeNotifierProvider其實是 父與子的關係，ChangeNotifierProvider在ListenableProvider的基礎上，且可以在 Model 中覆寫 ChangeNotifier 的 dispose 方法，來釋放其資源，這對於複雜 Model 的情況下十分有用，在需要的時候能夠自動調用其 disposer 方法</p>
</blockquote>
<p>5.<strong>ListenableProvider</strong></p>
<blockquote>
<p>監聽一個 Listenable，將其暴露給它的後代並在偵聽器發出事件時rebuild依賴項</p>
<p>用來共享可以監聽的對象，會隨著監聽對象的改變而更新widget。</p>
</blockquote>
<p>數據綁定:</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// 透過構造器綁定數據並進行監聽，當從Widget Tree中刪除時dispose要銷毀(構造器builder不可為空)</span></span><br><span class="line">    <span class="keyword">return</span> ListenableProvider&lt;User&gt;(</span><br><span class="line">        builder: (_) =&gt; User(<span class="string">&#x27;Flutter&#x27;</span>, <span class="number">0</span>),</span><br><span class="line">        child: MaterialApp(</span><br><span class="line">            title: <span class="string">&#x27;Flutter Demo&#x27;</span>,</span><br><span class="line">            theme: ThemeData(primarySwatch: Colors.blue),</span><br><span class="line">            home: MyHomePage(title: <span class="string">&#x27;Peovider Demo&#x27;</span>)));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// 透過.value對數據進行監聽listenable</span></span><br><span class="line">    <span class="keyword">return</span> ListenableProvider&lt;User&gt;.value(</span><br><span class="line">        listenable: User(<span class="string">&#x27;Flutter&#x27;</span>, <span class="number">0</span>),</span><br><span class="line">        child: MaterialApp(</span><br><span class="line">            title: <span class="string">&#x27;Flutter Demo&#x27;</span>,</span><br><span class="line">            theme: ThemeData(primarySwatch: Colors.blue),</span><br><span class="line">            home: MyHomePage(title: <span class="string">&#x27;Peovider Demo&#x27;</span>)));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>獲取數據:</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProviderText</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">final</span> user = Provider.of&lt;User&gt;(context); <span class="comment">// 使用Provider.of(context)</span></span><br><span class="line">    <span class="keyword">return</span> Text(<span class="string">&#x27;<span class="subst">$&#123;user.getName&#125;</span>&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProviderText</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// 使用Consumer Widget構造器</span></span><br><span class="line">    <span class="keyword">return</span> Consumer&lt;User&gt;(builder: (context, user, _) &#123;</span><br><span class="line">        <span class="keyword">return</span> Text(user.getName);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>6.<strong>ValueListenableProvider</strong></p>
<blockquote>
<p>要注意需要綁定的數據要繼承自ValueNotifier<T>，並且實現其構造方法，來對value的操作進行更新</p>
</blockquote>
<p>新建一個person實體類進行操作</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基本數據類型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringBean</span> <span class="keyword">extends</span> <span class="title">ValueNotifier</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">  StringBean(<span class="built_in">String</span> value) : <span class="keyword">super</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定義實體類</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">ValueNotifier</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">  Person(User value) : <span class="keyword">super</span>(value);</span><br><span class="line">  <span class="built_in">String</span> <span class="keyword">get</span> getPersonName =&gt; value.name;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> setPersonName(<span class="built_in">String</span> name) &#123;</span><br><span class="line">    value.name = name;</span><br><span class="line">    notifyListeners();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>數據綁定</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// 透過構造器(builder)綁定數據並進行監聽</span></span><br><span class="line">    <span class="keyword">return</span> ValueListenableProvider&lt;User&gt;(</span><br><span class="line">        builder: (_) =&gt; Person(User(<span class="string">&#x27;person&#x27;</span>, <span class="number">101</span>)),</span><br><span class="line">        child: MaterialApp(</span><br><span class="line">            title: <span class="string">&#x27;Flutter Demo&#x27;</span>,</span><br><span class="line">            theme: ThemeData(primarySwatch: Colors.blue),</span><br><span class="line">            home: MyHomePage(title: <span class="string">&#x27;Peovider Demo&#x27;</span>)));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//////</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// 透過value方式對數據進行綁定監聽</span></span><br><span class="line">    <span class="keyword">return</span> ValueListenableProvider&lt;User&gt;.value(</span><br><span class="line">        valueListenable: Person(User(<span class="string">&#x27;person&#x27;</span>, <span class="number">101</span>)),</span><br><span class="line">        child: MaterialApp(</span><br><span class="line">            title: <span class="string">&#x27;Flutter Demo&#x27;</span>,</span><br><span class="line">            theme: ThemeData(primarySwatch: Colors.blue),</span><br><span class="line">            home: MyHomePage(title: <span class="string">&#x27;Peovider Demo&#x27;</span>)));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>獲取數據</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProviderText</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">final</span> number = Provider.of&lt;<span class="built_in">String</span>&gt;(context);</span><br><span class="line">    <span class="keyword">final</span> person = Provider.of&lt;User&gt;(context);</span><br><span class="line">    <span class="keyword">return</span> Center(</span><br><span class="line">        child: Column(children: &lt;Widget&gt;[</span><br><span class="line">      Text(<span class="string">&#x27;<span class="subst">$&#123;number.toString()&#125;</span>==<span class="subst">$&#123;person.getName&#125;</span>&#x27;</span>),</span><br><span class="line">      Consumer&lt;User&gt;(builder: (context, user, _) &#123;</span><br><span class="line">        <span class="keyword">return</span> Text(user.getName);</span><br><span class="line">      &#125;)</span><br><span class="line">    ]));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>7.<strong>StreamProvider</strong></p>
<blockquote>
<p>監聽一個流，並且expose 其最近發送的值</p>
</blockquote>
<p>數據綁定</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// 通過構建器創建StreamController後進行綁定</span></span><br><span class="line">    <span class="keyword">return</span> StreamProvider&lt;Teacher&gt;(</span><br><span class="line">        builder: (_) =&gt; StreamController&lt;Teacher&gt;(),</span><br><span class="line">        initialData: Teacher(<span class="string">&#x27;Teacher&#x27;</span>, <span class="number">101</span>),</span><br><span class="line">        child: MaterialApp(</span><br><span class="line">            title: <span class="string">&#x27;Flutter Demo&#x27;</span>,</span><br><span class="line">            theme: ThemeData(primarySwatch: Colors.blue),</span><br><span class="line">            home: MyHomePage(title: <span class="string">&#x27;Peovider Demo&#x27;</span>)));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> tname;</span><br><span class="line">  <span class="keyword">var</span> tage;</span><br><span class="line">  Teacher(<span class="keyword">this</span>.tname, <span class="keyword">this</span>.tage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>獲取數據</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProviderText</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">final</span> teacher = Provider.of&lt;Teacher&gt;(context);</span><br><span class="line">    <span class="keyword">return</span> Center(</span><br><span class="line">        child: Column(children: &lt;Widget&gt;[</span><br><span class="line">      Text(<span class="string">&#x27;<span class="subst">$&#123;teacher.tname&#125;</span>&#x27;</span>),</span><br><span class="line">      Consumer&lt;Teacher&gt;(builder: (context, teacher, _) &#123;</span><br><span class="line">        <span class="keyword">return</span> Text(<span class="string">&#x27;<span class="subst">$&#123;teacher.tname&#125;</span>==<span class="subst">$&#123;teacher.tage&#125;</span>&#x27;</span>);</span><br><span class="line">      &#125;)</span><br><span class="line">    ]));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>8.<strong>FutureProvider</strong></p>
<blockquote>
<p>監聽Future並將其結果暴露給child及其後代。在Future 完成時，通知依賴的子孫節點進行刷新</p>
</blockquote>
<p>數據綁定</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// 通過構建器進行綁定</span></span><br><span class="line">    <span class="keyword">return</span> FutureProvider&lt;<span class="built_in">int</span>&gt;(</span><br><span class="line">        initialData: <span class="number">0</span>,</span><br><span class="line">        builder: (_) =&gt; Future.value(<span class="number">42</span>),</span><br><span class="line">        child: ...</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>獲取數據</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Provider.of&lt;<span class="built_in">int</span>&gt;(context)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Or</span></span><br><span class="line"></span><br><span class="line">Consumer&lt;<span class="built_in">int</span>&gt;(</span><br><span class="line">  builder: (context, value, __) &#123;</span><br><span class="line">    <span class="keyword">return</span> Text(value.toString());</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
        <tag>statement</tag>
      </tags>
  </entry>
  <entry>
    <title>flutter的狀態管理</title>
    <url>/2021/flutter/eb3237329b43/</url>
    <content><![CDATA[<h1 id="flutter的狀態管理"><a href="#flutter的狀態管理" class="headerlink" title="flutter的狀態管理"></a>flutter的狀態管理</h1><a href="/2021/flutter/f95ae0025bf4/" title="關於flutter的lifecycle">關於flutter的lifecycle</a>

<blockquote>
<p>StatelessWidget在App初始化之後就不能改變，它是immutable。如果想要改變就得new一個新的StatelessWidget去做更換</p>
<p>StatefulWidget可以在App內無限次的被重繪集及更新狀態，它是mutable，需要重繪時可以調用setState()，去標記自己為dirty狀態，為下次更新做準備</p>
</blockquote>
<p>使用Stateful與Stateless:</p>
<ul>
<li>盡可能用Stateless。</li>
<li>Stateful Wigets盡量在越低層級的節點使用，避免過多不必要的重build。</li>
<li>setState((){})會觸發State.build，如果你的觸發是在根節點，會造成所有Widgets被重build，會是個效能問題。</li>
<li>需要重build的Widget，盡量節點數越少越好。</li>
</ul>
<h2 id="StatefulWidget-and-State"><a href="#StatefulWidget-and-State" class="headerlink" title="StatefulWidget and State"></a>StatefulWidget and State</h2><p>在其life cycle中可以多次構建不同的widgets</p>
<p>setState</p>
<blockquote>
<p>如果需要跨組件傳遞，需要把傳遞的任務放到parent的widget上。由於每次setState需要rebuild widgets，如果是隔很多層的傳遞，需要被rebuild的widgets會越多，相對效能會比較差，僅適合小規模的更新</p>
</blockquote>
<p>setState調用後</p>
<ol>
<li>調用當前element的markNeedsBuild方法，將當前element標記為 dirty</li>
<li>接著調用 scheduleBuildFor，將當前element添加到piplineOwner的dirtyElements列表</li>
<li>最後請求一個新的frame，隨後會繪製新的frame：onBuildScheduled-&gt;ensureVisualUpdate-&gt;scheduleFrame()。當新的frame到來時執行渲染管線</li>
</ol>
<p>1.重新構建 widget 樹</p>
<blockquote>
<p>如果 dirtyElements 列表不為空，則遍歷該列表，調用每一個element的rebuild方法重新構建新的widget（樹）</p>
</blockquote>
<p>由於新的widget(樹)使用新的狀態構建，所以可能導致widget佈局信息（佔用的空間和位置）發生變化，如果發生變化，則會調用其renderObject的markNeedsLayout方法，該方法會從當前節點向父級查找，直到找到一個relayoutBoundary的節點，然後會將它添加到一個全局的nodesNeedingLayout列表中；如果直到根節點也沒有找到relayoutBoundary，則將根節點添加到nodesNeedingLayout列表中。</p>
<p>2.更新layout</p>
<blockquote>
<p>遍歷nodesNeedingLayout數組，對每一個renderObject重新佈局（調用其layout方法），確定新的大小和偏移。</p>
</blockquote>
<p>layout方法中會調用markNeedsPaint()，該方法和 markNeedsLayout 方法功能類似，也會從當前節點向父級查找，直到找到一個isRepaintBoundary屬性為true的父節點，然後將它添加到一個全局的nodesNeedingPaint列表中；由於根節點（RenderView）的 isRepaintBoundary 為 true，所以必會找到一個。查找過程結束後會調用 buildOwner.requestVisualUpdate 方法，該方法最終會調用scheduleFrame()，該方法中會先判斷是否已經請求過新的frame，如果沒有則請求一個新的frame。</p>
<p>3.更新composition信息</p>
<p>4.更新繪製</p>
<blockquote>
<p>遍歷nodesNeedingPaint列表，調用每一個節點的paint方法進行重繪，繪製過程會生成Layer</p>
</blockquote>
<p>(flutter中繪製結果是保存在Layer中的，也就是說只要Layer不釋放，那麼繪製的結果就會被緩存，因此，Layer可以跨frame來緩存繪製結果，避免不必要的重繪開銷。)</p>
<p>Flutter框架繪製過程中，遇到isRepaintBoundary為true的節點時，才會生成一個新的Layer。可見Layer和 renderObject 不是一一對應關係，父子節點可以共享，這個我們會在隨後的一個試驗中來驗證。當然，如果是自定義組件，我們可以在renderObject中手動添加任意多個 Layer，這通常用於只需一次繪製而隨後不會發生變化的繪製元素的緩存場景</p>
<p>5.上屏</p>
<blockquote>
<p>繪製完成後，得到一棵Layer樹，最後我們需要將Layer樹中的繪製信息在屏幕上顯示。將繪製信息提交給Flutter engine，而renderView.compositeFrame正是完成了這個使命。</p>
</blockquote>
<h2 id="InheritedWidget"><a href="#InheritedWidget" class="headerlink" title="InheritedWidget"></a>InheritedWidget</h2><blockquote>
<p>一種讓數據在widget tree中<strong>從上到下</strong>傳遞、共享的方式(被後代Widget讀取的環境狀態)。</p>
</blockquote>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// (1)建立一個subclass InheritedWiget</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FrogColor</span> <span class="keyword">extends</span> <span class="title">InheritedWidget</span> </span>&#123;</span><br><span class="line">  <span class="comment">// (2)建立Data</span></span><br><span class="line">  <span class="keyword">const</span> FrogColor(&#123;</span><br><span class="line">    Key? key,</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.color,</span><br><span class="line">    <span class="keyword">required</span> Widget child,</span><br><span class="line">  &#125;) : <span class="keyword">super</span>(key: key, child: child);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> Color color;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// (3)加入of方法</span></span><br><span class="line">  <span class="keyword">static</span> FrogColor of(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">final</span> FrogColor? result = context.dependOnInheritedWidgetOfExactType&lt;FrogColor&gt;();</span><br><span class="line">    <span class="keyword">assert</span>(result != <span class="keyword">null</span>, <span class="string">&#x27;No FrogColor found in context&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> result!;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// (4)加入updateShouldNotify方法 </span></span><br><span class="line">  <span class="comment">// (5)並控制當接收到更新</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">bool</span> updateShouldNotify(FrogColor old) =&gt; color != old.color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 of 方法時，上下文必須是 InheritedWidget 的後代，這意味著它必須在樹中“低於”InheritedWidget。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在這個例子中，使用的上下文是來自Builder的上下文，它是FrogColor小部件的子級，所以這是有效的。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyPage(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      body: FrogColor(</span><br><span class="line">        color: Colors.green,</span><br><span class="line">        child: Builder(</span><br><span class="line">          builder: (BuildContext innerContext) &#123;</span><br><span class="line">            <span class="keyword">return</span> Text(</span><br><span class="line">              <span class="string">&#x27;Hello Frog&#x27;</span>,</span><br><span class="line">              style: TextStyle(color: FrogColor.of(innerContext).color),</span><br><span class="line">            );</span><br><span class="line">          &#125;,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在此示例中，使用的上下文是來自 MyOtherPage 小部件的上下文，它是 FrogColor 小部件的父級，因此這不起作用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyOtherPage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyOtherPage(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      body: FrogColor(</span><br><span class="line">        color: Colors.green,</span><br><span class="line">        child: Text(</span><br><span class="line">          <span class="string">&#x27;Hello Frog&#x27;</span>,</span><br><span class="line">          style: TextStyle(color: FrogColor.of(context).color),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>無法定向通知。(從上到下傳遞)</p>
<p>容易造成不必要的刷新，不支持跨頁面的資料傳遞 (如果不在同一個widget 樹，即無法共享資料)</p>
<p>它共享的資料是不可改變的，如果想讓它監聽資料的變化並且重新構建InheritedWidget，必須透過結合StatefulWidget、ChangeNotifier或Stream來使用</p>
</blockquote>
<p>1.createElement()</p>
<blockquote>
<p>創立對應的Element</p>
</blockquote>
<p>2.updateShouldNotify(covariant InheritedWidget oldWidget)</p>
<blockquote>
<p>framework是否應通知從該widgets繼承的widgets</p>
</blockquote>
<hr>
<p>ChangeNotifier()</p>
<p>用於向監聽器發送通知。換言之，如果被定義為ChangeNotifier，你可以訂閱它的狀態變化 (即觀察者模式)</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChangeNotifier</span> <span class="keyword">implements</span> <span class="title">Listenable</span> </span>&#123;</span><br><span class="line">  <span class="built_in">List</span> listeners=[];</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//添加監聽器</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> addListener(VoidCallback listener) &#123;</span><br><span class="line">     listeners.add(listener);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//移除監聽器</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> removeListener(VoidCallback listener) &#123;</span><br><span class="line">    listeners.remove(listener);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//通知所有監聽器，觸發監聽器回調</span></span><br><span class="line">  <span class="keyword">void</span> notifyListeners() &#123;</span><br><span class="line">    listeners.forEach((item)=&gt;item());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>將要共享的狀態設計為一個Model類，然後讓它繼承ChangeNotifier。當共享狀態改變時，只需調用notifyListeners()來通知訂閱者，由訂閱者來重新構建InheritedProvider</p>
<p>change_notifier_provider.dart:</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;inherited_provider.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 將要共享的狀態設計為一個 Model 類，然後讓它繼承ChangeNotifier，透過泛型指定共享資料型別</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChangeNotifierProvider</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">ChangeNotifier</span>&gt; <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  ChangeNotifierProvider(&#123;</span><br><span class="line">    Key key,</span><br><span class="line">    <span class="keyword">this</span>.data,</span><br><span class="line">    <span class="keyword">this</span>.child,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> Widget child;</span><br><span class="line">  <span class="keyword">final</span> T data;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//提供了靜態方法of，給子widget獲取InheritedProvider所保存的共享資料model</span></span><br><span class="line">  <span class="keyword">static</span> T of&lt;T&gt;(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">//透過dependOnInheritedWidgetOfExactType取得InheritedProvider，並指定設計的Model當作InheritedProvider的共享狀態型別</span></span><br><span class="line">    <span class="keyword">final</span> provider = context.dependOnInheritedWidgetOfExactType&lt;InheritedProvider&lt;T&gt;&gt;();</span><br><span class="line">    <span class="keyword">return</span> provider.data;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _ChangeNotifierProviderState&lt;T&gt; createState() =&gt;</span><br><span class="line">      _ChangeNotifierProviderState&lt;T&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//監聽到共享狀態改變時重新構建Widget Tree</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_ChangeNotifierProviderState</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">ChangeNotifier</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">ChangeNotifierProvider</span>&lt;<span class="title">T</span>&gt;&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">void</span> update() &#123;</span><br><span class="line">    <span class="comment">//如果共享資料發生變化(model調用了notifyListeners)，重新構建InheritedProvider</span></span><br><span class="line">    setState(() =&gt; &#123;&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> didUpdateWidget(ChangeNotifierProvider&lt;T&gt; oldWidget) &#123;</span><br><span class="line">    <span class="comment">//當Provider更新資料，將舊資料解除監聽，同時監聽新的資料</span></span><br><span class="line">    <span class="keyword">if</span> (widget.data != oldWidget.data) &#123;</span><br><span class="line">      oldWidget.data.removeListener(update);</span><br><span class="line">      widget.data.addListener(update);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">super</span>.didUpdateWidget(oldWidget);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="comment">// 新增監聽器</span></span><br><span class="line">    widget.data.addListener(update);</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    <span class="comment">// 移除監聽器</span></span><br><span class="line">    widget.data.removeListener(update);</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> InheritedProvider&lt;T&gt;(</span><br><span class="line">      data: widget.data,</span><br><span class="line">      child: widget.child,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>現在，讓Model通過ChangeNotifierProvider讓我們能在widget上建立監聽、訂閱。</p>
<p>使用Builder模式來建立Consumer，當<strong>收到更新通知就會通過 builder 重新構建</strong>。<br>(把Consumer放在widget Tree盡量低的位置上，避免一點小變化就重新構建widget)</p>
<p>consumer.dart:</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;change_notifier_provider.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ChangeNotifier發生變化的時候會調用builder</span></span><br><span class="line"><span class="comment">// 當model調用notifyListeners()時，所有和Consumer相關的builder方法都會被調用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  Consumer(&#123;</span><br><span class="line">    Key key,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.builder,</span><br><span class="line">    <span class="keyword">this</span>.child,</span><br><span class="line">  &#125;)  : <span class="keyword">assert</span>(builder != <span class="keyword">null</span>),</span><br><span class="line">        <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> Widget child;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> Widget <span class="built_in">Function</span>(BuildContext context, T value) builder;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> builder(</span><br><span class="line">      context,</span><br><span class="line">      ChangeNotifierProvider.of&lt;T&gt;(context), <span class="comment">//取得共享資料</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>Example:用購物車來使用我們創建的Provider：</p>
<blockquote>
<p>實現一個顯示購物車中所有商品總價的功能：向購物車中添加新商品時總價更新</p>
</blockquote>
<p>定義一個Item，用於表示商品信息</p>
<p>cart_item.dart：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line">  Item(<span class="keyword">this</span>.price, <span class="keyword">this</span>.count);</span><br><span class="line">  <span class="built_in">double</span> price; </span><br><span class="line">  <span class="built_in">int</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定義一個保存購物車內商品資料的CartModel</p>
<p>cart_model.dart：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:collection&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;cart_item.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CartModel</span> <span class="keyword">extends</span> <span class="title">ChangeNotifier</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;Item&gt; _items = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 禁止改變購物車裡的商品資訊</span></span><br><span class="line">  UnmodifiableListView&lt;Item&gt; <span class="keyword">get</span> items =&gt; UnmodifiableListView(_items);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">double</span> <span class="keyword">get</span> totalPrice =&gt;</span><br><span class="line">      _items.fold(<span class="number">0</span>, (value, item) =&gt; value + item.count * item.price);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> add(Item item) &#123;</span><br><span class="line">    _items.add(item);</span><br><span class="line">    <span class="comment">// 當購物車新增商品時，通知監聽器 (訂閱者)，重新構建InheritedProvider，更新狀態</span></span><br><span class="line">    notifyListeners();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>每當按下按鈕，即會增加一筆商品，總價也會改變</p>
<p>main.dart</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:provider_tutorial/cart_model.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;cart_item.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;change_notifier_provider.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;consumer.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(ChangeNotifierProvider&lt;CartModel&gt;(</span><br><span class="line">    data: CartModel(),</span><br><span class="line">    child: MyApp(),</span><br><span class="line">  ));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;Flutter Demo&#x27;</span>,</span><br><span class="line">      theme: ThemeData(</span><br><span class="line">        primarySwatch: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">      home: MyHomePage(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomePage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">&#x27;Flutter Provider Demo&#x27;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Column(</span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            Column(</span><br><span class="line">              children: &lt;Widget&gt;[</span><br><span class="line">                Consumer&lt;CartModel&gt;(</span><br><span class="line">                  builder: (context, cart) =&gt; Text(</span><br><span class="line">                    <span class="string">&quot;購物車總價: <span class="subst">$&#123;cart.totalPrice&#125;</span>&quot;</span>,</span><br><span class="line">                    style: Theme.of(context).textTheme.headline5,</span><br><span class="line">                  ),</span><br><span class="line">                ),</span><br><span class="line">                Consumer&lt;CartModel&gt;(</span><br><span class="line">                  builder: (context, cart) =&gt; RaisedButton(</span><br><span class="line">                    child: Text(<span class="string">&quot;添加商品&quot;</span>),</span><br><span class="line">                    onPressed: () &#123;</span><br><span class="line">                      <span class="comment">//添加商品至購物車，添加後總價會更新</span></span><br><span class="line">                      ChangeNotifierProvider.of&lt;CartModel&gt;(context)</span><br><span class="line">                          .add(Item(<span class="number">10.0</span>, <span class="number">1</span>));</span><br><span class="line">                    &#125;,</span><br><span class="line">                  ),</span><br><span class="line">                ),</span><br><span class="line">              ],</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在構建”添加按鈕”的代碼有個性能問題:<br>點擊按鈕後，我們只想要購物車商品總價變化(也就是只更新總價的Text)，但按鈕本身沒變化，是不應該重新build的。</p>
<blockquote>
<p>因為構建Button的builder調用了ChangeNotifierProvider.of(也就是依賴widget樹上的InheritedWidget Widget，即是IngeritedProvider)</p>
<p>所以，當天加完商品後，CartModel發生變化，會通知ChangeNotifierProvider，而ChangeNotifierProvider會重新構建子樹，所以IngeritedProvider將會更新，而依賴它的後代Widget會重新被構建</p>
</blockquote>
<p>改進: 打破解除Button和IngeritedWidget間的依賴關係</p>
<p>InheritedWidget調用dependOnInheritedWidgetOfExactType()和getElementForInheritedWidgetOfExactType()的區別就是前者會註冊依賴關係，而後者不會。<br>所以我們只需要將ChangeNotifierProvider.of的實現給改成:</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Before</span></span><br><span class="line">  <span class="keyword">static</span> T of&lt;T&gt;(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">//透過dependOnInheritedWidgetOfExactType 取得InheritedProvider，並指定設計的Model 當作InheritedProvider 的共享狀態型別</span></span><br><span class="line">    <span class="keyword">final</span> provider =</span><br><span class="line">        context.dependOnInheritedWidgetOfExactType&lt;InheritedProvider&lt;T&gt;&gt;();</span><br><span class="line">    <span class="keyword">return</span> provider.data;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// After，增加一個listen的參數，來表示是否建立依賴關係</span></span><br><span class="line">  <span class="keyword">static</span> T of&lt;T&gt;(BuildContext context, &#123;<span class="built_in">bool</span> listen = <span class="keyword">true</span>&#125;) &#123;</span><br><span class="line">    <span class="keyword">final</span> type = _typeOf&lt;InheritedProvider&lt;T&gt;&gt;();</span><br><span class="line">    <span class="keyword">final</span> provider = listen</span><br><span class="line">        ? context.dependOnInheritedWidgetOfExactType&lt;InheritedProvider&lt;T&gt;&gt;()</span><br><span class="line">        : context.getElementForInheritedWidgetOfExactType&lt;InheritedProvider&lt;T&gt;&gt;()?.widget</span><br><span class="line">            <span class="keyword">as</span> InheritedProvider&lt;T&gt;;</span><br><span class="line">    <span class="keyword">return</span> provider.data;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>將button修改成</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Column(</span><br><span class="line">    children: &lt;Widget&gt;[</span><br><span class="line">    Consumer&lt;CartModel&gt;(</span><br><span class="line">        builder: (context, cart) =&gt; Text(</span><br><span class="line">        <span class="string">&quot;購物車總價: <span class="subst">$&#123;cart.totalPrice&#125;</span>&quot;</span>,</span><br><span class="line">        style: Theme.of(context).textTheme.headline5,</span><br><span class="line">        ),</span><br><span class="line">    ),</span><br><span class="line">    Consumer&lt;CartModel&gt;(</span><br><span class="line">        builder: (context, cart) =&gt; RaisedButton(</span><br><span class="line">        child: Text(<span class="string">&quot;添加商品&quot;</span>),</span><br><span class="line">        onPressed: () &#123;</span><br><span class="line">            <span class="comment">//添加商品至購物車，添加後總價會更新，先固定用商品為 Item(10.0, 1)當範例</span></span><br><span class="line">            <span class="comment">// ChangeNotifierProvider.of&lt;CartModel&gt;(context).add(Item(10.0, 1));</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// listen 設為false，不建立依賴關係</span></span><br><span class="line">            ChangeNotifierProvider.of&lt;CartModel&gt;(context, listen: <span class="keyword">false</span>)</span><br><span class="line">            .add(Item(<span class="number">20.0</span>, <span class="number">1</span>));</span><br><span class="line">        &#125;,</span><br><span class="line">        ),</span><br><span class="line">    ),</span><br><span class="line">    ],</span><br><span class="line">),</span><br></pre></td></tr></table></figure>

<blockquote>
<p>我們能發現點擊按鈕後，按鈕不會被重新構建，而總價仍會更新 (因為Consumer中調用ChangeNotifierProvider.of時listen值為true，所以還是會建立依賴關係)</p>
</blockquote>
]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
        <tag>statement</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter Widget中的Key</title>
    <url>/2021/flutter/504a7220005f/</url>
    <content><![CDATA[<h1 id="Flutter-Widget中的Key"><a href="#Flutter-Widget中的Key" class="headerlink" title="Flutter Widget中的Key"></a>Flutter Widget中的Key</h1><p>Flutter的Widget Tree會有結構相對應的Element Tree，若希望Widget Tree的node位置改變後，Element Tree也跟著調整對應的節點位置，就要使用key</p>
<h2 id="樹的生成和刷新"><a href="#樹的生成和刷新" class="headerlink" title="樹的生成和刷新"></a>樹的生成和刷新</h2><p>在Flutter應用第一次啟動的時候，attachRootWidget()生成了三棵樹(Widget Tree、Render Tree、Element Tree)</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> runApp(Widget app) &#123;</span><br><span class="line">WidgetsFlutterBinding.ensureInitialized()</span><br><span class="line">..attachRootWidget(app)</span><br><span class="line">..scheduleWarmUpFrame();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在用戶點擊按鈕時，藉由setState()設置相關element node狀態為dirty, 使他在下一個vsync信號來時觸發widget tree的刷新</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">switchWidget() &#123;</span><br><span class="line">    widgets.insert(<span class="number">0</span>, widgets.removeAt(<span class="number">1</span>));</span><br><span class="line">    setState(() &#123;&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">@protected</span></span><br><span class="line"><span class="keyword">void</span> setState(VoidCallback fn) &#123;</span><br><span class="line">......</span><br><span class="line">_element.markNeedsBuild();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="element的生成"><a href="#element的生成" class="headerlink" title="element的生成"></a>element的生成</h2><ul>
<li>StatelessWidget element</li>
</ul>
<p>刷新過程中，StatelessWidget 會生成 StatelessElement</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">StatelessWidget</span> <span class="keyword">extends</span> <span class="title">Widget</span> </span>&#123;</span><br><span class="line">    <span class="comment">/// <span class="markdown">Creates a [StatelessElement] to manage this widget&#x27;s location in the tree.</span></span></span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    StatelessElement createElement() =&gt; StatelessElement(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure>

<p>執行update時，rebuild()最終調用build()來直接重建一個Widget</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// StatelessElement，僅持有一個對Widget的引用，沒有狀態信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// <span class="markdown">An [Element] that uses a [StatelessWidget] as its configuration.</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StatelessElement</span> <span class="keyword">extends</span> <span class="title">ComponentElement</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Creates an element that uses the given widget as its configuration.</span></span><br><span class="line">    StatelessElement(StatelessWidget widget) : <span class="keyword">super</span>(widget);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    StatelessWidget <span class="keyword">get</span> widget =&gt; <span class="keyword">super</span>.widget;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    Widget build() =&gt; widget.build(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="keyword">void</span> update(StatelessWidget newWidget) &#123;</span><br><span class="line">        <span class="keyword">super</span>.update(newWidget);</span><br><span class="line">        <span class="keyword">assert</span>(widget == newWidget);</span><br><span class="line">        _dirty = <span class="keyword">true</span>;</span><br><span class="line">        rebuild();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li>StatefulWidget element</li>
</ul>
<p>刷新時，StatefulWidget會生成StatefulElement，這個Element除了有一個widget引用，還有一個State的引用，新建element的時候保存在_state中</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StatefulElement</span> <span class="keyword">extends</span> <span class="title">ComponentElement</span> </span>&#123;</span><br><span class="line">    <span class="comment">/// <span class="markdown">Creates an element that uses the given widget as its configuration.</span></span></span><br><span class="line">    StatefulElement(StatefulWidget widget)</span><br><span class="line">        : _state = widget.createState(),</span><br></pre></td></tr></table></figure>

<p>當使用者觸發了element tree的刷新(ex.點擊按鈕)後，調用StatefulElement.update進行更新</p>
<blockquote>
<p>StatefulElement此時僅更新了widget的引用，<strong>沒有更新state</strong></p>
<p>因此，Element.rebuid最終會調用到我們定義的_StatefulContainerState.build中時，color還是<strong>之前的值</strong>，並沒有變化。</p>
<p>因為**_state沒有更新**，還是StatefulElement構造時使用的那個</p>
</blockquote>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">void</span> update(StatefulWidget newWidget) &#123;</span><br><span class="line">    ......</span><br><span class="line">    _state._widget = widget;</span><br></pre></td></tr></table></figure>

<h2 id="使用-Key-標記-Element"><a href="#使用-Key-標記-Element" class="headerlink" title="使用 Key 標記 Element"></a>使用 Key 標記 Element</h2><p>Flutter提出解決StatefulElement如何更新state的方案，就是使用Key標記Element。發現Key不相同時重新刷新Element</p>
<p>Element Tree 觸發更新過程:</p>
<ol>
<li>從根結點開始，Element.updateChild</li>
<li>深度遍歷到Row節點，child是StatefulContainer</li>
<li>判斷Widget.canUpdate(child.widget, newWidget)是true，可以執行更新</li>
</ol>
<blockquote>
<p>這裡child.widget是變化之前的StatefulContainer，newWidget是新的StatefulContainer；</p>
<p>由於上一步判斷可以更新，因此執行child.update(newWidget);也就是StatefulElement.update</p>
<p>StatefulElement.update的時候，僅更新了widget的引用，沒有更新state，導致顏色沒有變化。</p>
</blockquote>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">void</span> update(StatefulWidget newWidget) &#123;</span><br><span class="line">    ......</span><br><span class="line">    _state._widget = widget;</span><br></pre></td></tr></table></figure>

<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 關鍵點在Widget.canUpdate需要返回 false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Flutter設計人員設計了這個方法：當我們給 StatefulContainer設置 Key 時，Widget.canUpdate 返回 false。 </span></span><br><span class="line"><span class="comment">// 原有的Element會被暫時deactive，在需要時重新mount到樹上。從而保證 StatefulWidget 狀態可更新，而且狀態不丟失</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">bool</span> canUpdate(Widget oldWidget, Widget newWidget) &#123;</span><br><span class="line">    <span class="keyword">return</span> oldWidget.runtimeType == newWidget.runtimeType</span><br><span class="line">    &amp;&amp; oldWidget.key == newWidget.key;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>從圖中可以看到，Widget和State狀態對應產生了問題。Key就是為了解決圖中widget更新而state沒有更新導致的問題而出現的</p>
<p><img data-src="/2021/flutter/504a7220005f/2021-12-27-00-58-49.png" alt="tree"></p>
<p>另一種場景是使用了key，但是導致State被重新創建從而丟失State信息。這就是Key的作用域的問題。對應的解決方案就是GloableKey</p>
<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><p><a href="https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/741171/#outline__2_1">Flutter學習筆記：Key的作用</a><br><a href="https://openhome.cc/Gossip/Flutter/Key2.html">Flutter學習筆記：Key的作用2</a><br><a href="https://openhome.cc/Gossip/Flutter/Key.html">Widget 的 Key</a><br><a href="https://www.youtube.com/watch?v=kn0EOS-ZiIc">When to Use Keys</a></p>
]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
        <tag>widget</tag>
      </tags>
  </entry>
  <entry>
    <title>使用cmc api來建立一個flutter app</title>
    <url>/2022/flutter/f1115703de2c/</url>
    <content><![CDATA[<h1 id="創建加密貨幣app"><a href="#創建加密貨幣app" class="headerlink" title="創建加密貨幣app"></a>創建加密貨幣app</h1><p><a href="https://coinmarketcap.com/api/">coinmarketcap</a></p>
<p>registe and verifiy email:<br><img data-src="/2022/flutter/f1115703de2c/2022-01-07-22-05-05.png" alt="verify"></p>
<p>copy api:<br><img data-src="/2022/flutter/f1115703de2c/2022-01-07-22-12-52.png" alt="copy api"></p>
<p>project structure:<br><img data-src="/2022/flutter/f1115703de2c/2022-01-08-13-24-45.png" alt="project structure"></p>
<p>package<br><img data-src="/2022/flutter/f1115703de2c/2022-01-08-13-25-15.png" alt="package"></p>
<h2 id="Core"><a href="#Core" class="headerlink" title="Core"></a>Core</h2><p>models/payload_model.dart:</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// To parse this JSON data, do</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//     final payloadModel = payloadModelFromMap(jsonString);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:convert&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PayloadModel</span> </span>&#123;</span><br><span class="line">  PayloadModel(&#123;</span><br><span class="line">    <span class="keyword">this</span>.status,</span><br><span class="line">    <span class="keyword">this</span>.data,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  Status? status;</span><br><span class="line">  <span class="built_in">List</span>&lt;Datum&gt;? data;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">factory</span> PayloadModel.fromJson(<span class="built_in">String</span> str) =&gt;</span><br><span class="line">      PayloadModel.fromMap(json.decode(str));</span><br><span class="line"></span><br><span class="line">  <span class="built_in">String</span> toJson() =&gt; json.encode(toMap());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">factory</span> PayloadModel.fromMap(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; json) =&gt; PayloadModel(</span><br><span class="line">        status: json[<span class="string">&quot;status&quot;</span>] == <span class="keyword">null</span> ? <span class="keyword">null</span> : Status.fromMap(json[<span class="string">&quot;status&quot;</span>]),</span><br><span class="line">        data: json[<span class="string">&quot;data&quot;</span>] == <span class="keyword">null</span></span><br><span class="line">            ? <span class="keyword">null</span></span><br><span class="line">            : <span class="built_in">List</span>&lt;Datum&gt;.from(json[<span class="string">&quot;data&quot;</span>].map((x) =&gt; Datum.fromMap(x))),</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; toMap() =&gt; &#123;</span><br><span class="line">        <span class="string">&quot;status&quot;</span>: status == <span class="keyword">null</span> ? <span class="keyword">null</span> : status!.toMap(),</span><br><span class="line">        <span class="string">&quot;data&quot;</span>: data == <span class="keyword">null</span></span><br><span class="line">            ? <span class="keyword">null</span></span><br><span class="line">            : <span class="built_in">List</span>&lt;<span class="built_in">dynamic</span>&gt;.from(data!.map((x) =&gt; x.toMap())),</span><br><span class="line">      &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Datum</span> </span>&#123;</span><br><span class="line">  Datum(&#123;</span><br><span class="line">    <span class="keyword">this</span>.id,</span><br><span class="line">    <span class="keyword">this</span>.name,</span><br><span class="line">    <span class="keyword">this</span>.symbol,</span><br><span class="line">    <span class="keyword">this</span>.slug,</span><br><span class="line">    <span class="keyword">this</span>.numMarketPairs,</span><br><span class="line">    <span class="keyword">this</span>.dateAdded,</span><br><span class="line">    <span class="keyword">this</span>.tags,</span><br><span class="line">    <span class="keyword">this</span>.maxSupply,</span><br><span class="line">    <span class="keyword">this</span>.circulatingSupply,</span><br><span class="line">    <span class="keyword">this</span>.totalSupply,</span><br><span class="line">    <span class="keyword">this</span>.platform,</span><br><span class="line">    <span class="keyword">this</span>.cmcRank,</span><br><span class="line">    <span class="keyword">this</span>.lastUpdated,</span><br><span class="line">    <span class="keyword">this</span>.quote,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">int?</span> id;</span><br><span class="line">  <span class="built_in">String?</span> name;</span><br><span class="line">  <span class="built_in">String?</span> symbol;</span><br><span class="line">  <span class="built_in">String?</span> slug;</span><br><span class="line">  <span class="built_in">int?</span> numMarketPairs;</span><br><span class="line">  <span class="built_in">DateTime?</span> dateAdded;</span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;? tags;</span><br><span class="line">  <span class="built_in">int?</span> maxSupply;</span><br><span class="line">  <span class="built_in">double?</span> circulatingSupply;</span><br><span class="line">  <span class="built_in">double?</span> totalSupply;</span><br><span class="line">  Platform? platform;</span><br><span class="line">  <span class="built_in">int?</span> cmcRank;</span><br><span class="line">  <span class="built_in">DateTime?</span> lastUpdated;</span><br><span class="line">  Quote? quote;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">factory</span> Datum.fromJson(<span class="built_in">String</span> str) =&gt; Datum.fromMap(json.decode(str));</span><br><span class="line"></span><br><span class="line">  <span class="built_in">String</span> toJson() =&gt; json.encode(toMap());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">factory</span> Datum.fromMap(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; json) =&gt; Datum(</span><br><span class="line">        id: json[<span class="string">&quot;id&quot;</span>] == <span class="keyword">null</span> ? <span class="keyword">null</span> : json[<span class="string">&quot;id&quot;</span>],</span><br><span class="line">        name: json[<span class="string">&quot;name&quot;</span>] == <span class="keyword">null</span> ? <span class="keyword">null</span> : json[<span class="string">&quot;name&quot;</span>],</span><br><span class="line">        symbol: json[<span class="string">&quot;symbol&quot;</span>] == <span class="keyword">null</span> ? <span class="keyword">null</span> : json[<span class="string">&quot;symbol&quot;</span>],</span><br><span class="line">        slug: json[<span class="string">&quot;slug&quot;</span>] == <span class="keyword">null</span> ? <span class="keyword">null</span> : json[<span class="string">&quot;slug&quot;</span>],</span><br><span class="line">        numMarketPairs:</span><br><span class="line">            json[<span class="string">&quot;num_market_pairs&quot;</span>] == <span class="keyword">null</span> ? <span class="keyword">null</span> : json[<span class="string">&quot;num_market_pairs&quot;</span>],</span><br><span class="line">        dateAdded: json[<span class="string">&quot;date_added&quot;</span>] == <span class="keyword">null</span></span><br><span class="line">            ? <span class="keyword">null</span></span><br><span class="line">            : <span class="built_in">DateTime</span>.parse(json[<span class="string">&quot;date_added&quot;</span>]),</span><br><span class="line">        tags: json[<span class="string">&quot;tags&quot;</span>] == <span class="keyword">null</span></span><br><span class="line">            ? <span class="keyword">null</span></span><br><span class="line">            : <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;.from(json[<span class="string">&quot;tags&quot;</span>].map((x) =&gt; x)),</span><br><span class="line">        maxSupply: json[<span class="string">&quot;max_supply&quot;</span>] == <span class="keyword">null</span> ? <span class="keyword">null</span> : json[<span class="string">&quot;max_supply&quot;</span>],</span><br><span class="line">        circulatingSupply: json[<span class="string">&quot;circulating_supply&quot;</span>] == <span class="keyword">null</span></span><br><span class="line">            ? <span class="keyword">null</span></span><br><span class="line">            : json[<span class="string">&quot;circulating_supply&quot;</span>].toDouble(),</span><br><span class="line">        totalSupply: json[<span class="string">&quot;total_supply&quot;</span>] == <span class="keyword">null</span></span><br><span class="line">            ? <span class="keyword">null</span></span><br><span class="line">            : json[<span class="string">&quot;total_supply&quot;</span>].toDouble(),</span><br><span class="line">        platform: json[<span class="string">&quot;platform&quot;</span>] == <span class="keyword">null</span></span><br><span class="line">            ? <span class="keyword">null</span></span><br><span class="line">            : Platform.fromMap(json[<span class="string">&quot;platform&quot;</span>]),</span><br><span class="line">        cmcRank: json[<span class="string">&quot;cmc_rank&quot;</span>] == <span class="keyword">null</span> ? <span class="keyword">null</span> : json[<span class="string">&quot;cmc_rank&quot;</span>],</span><br><span class="line">        lastUpdated: json[<span class="string">&quot;last_updated&quot;</span>] == <span class="keyword">null</span></span><br><span class="line">            ? <span class="keyword">null</span></span><br><span class="line">            : <span class="built_in">DateTime</span>.parse(json[<span class="string">&quot;last_updated&quot;</span>]),</span><br><span class="line">        quote: json[<span class="string">&quot;quote&quot;</span>] == <span class="keyword">null</span> ? <span class="keyword">null</span> : Quote.fromMap(json[<span class="string">&quot;quote&quot;</span>]),</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; toMap() =&gt; &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: id == <span class="keyword">null</span> ? <span class="keyword">null</span> : id,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: name == <span class="keyword">null</span> ? <span class="keyword">null</span> : name,</span><br><span class="line">        <span class="string">&quot;symbol&quot;</span>: symbol == <span class="keyword">null</span> ? <span class="keyword">null</span> : symbol,</span><br><span class="line">        <span class="string">&quot;slug&quot;</span>: slug == <span class="keyword">null</span> ? <span class="keyword">null</span> : slug,</span><br><span class="line">        <span class="string">&quot;num_market_pairs&quot;</span>: numMarketPairs == <span class="keyword">null</span> ? <span class="keyword">null</span> : numMarketPairs,</span><br><span class="line">        <span class="string">&quot;date_added&quot;</span>: dateAdded == <span class="keyword">null</span> ? <span class="keyword">null</span> : dateAdded!.toIso8601String(),</span><br><span class="line">        <span class="string">&quot;tags&quot;</span>: tags == <span class="keyword">null</span> ? <span class="keyword">null</span> : <span class="built_in">List</span>&lt;<span class="built_in">dynamic</span>&gt;.from(tags!.map((x) =&gt; x)),</span><br><span class="line">        <span class="string">&quot;max_supply&quot;</span>: maxSupply == <span class="keyword">null</span> ? <span class="keyword">null</span> : maxSupply,</span><br><span class="line">        <span class="string">&quot;circulating_supply&quot;</span>:</span><br><span class="line">            circulatingSupply == <span class="keyword">null</span> ? <span class="keyword">null</span> : circulatingSupply,</span><br><span class="line">        <span class="string">&quot;total_supply&quot;</span>: totalSupply == <span class="keyword">null</span> ? <span class="keyword">null</span> : totalSupply,</span><br><span class="line">        <span class="string">&quot;platform&quot;</span>: platform == <span class="keyword">null</span> ? <span class="keyword">null</span> : platform!.toMap(),</span><br><span class="line">        <span class="string">&quot;cmc_rank&quot;</span>: cmcRank == <span class="keyword">null</span> ? <span class="keyword">null</span> : cmcRank,</span><br><span class="line">        <span class="string">&quot;last_updated&quot;</span>:</span><br><span class="line">            lastUpdated == <span class="keyword">null</span> ? <span class="keyword">null</span> : lastUpdated!.toIso8601String(),</span><br><span class="line">        <span class="string">&quot;quote&quot;</span>: quote == <span class="keyword">null</span> ? <span class="keyword">null</span> : quote!.toMap(),</span><br><span class="line">      &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Platform</span> </span>&#123;</span><br><span class="line">  Platform(&#123;</span><br><span class="line">    <span class="keyword">this</span>.id,</span><br><span class="line">    <span class="keyword">this</span>.name,</span><br><span class="line">    <span class="keyword">this</span>.symbol,</span><br><span class="line">    <span class="keyword">this</span>.slug,</span><br><span class="line">    <span class="keyword">this</span>.tokenAddress,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">int?</span> id;</span><br><span class="line">  Name? name;</span><br><span class="line">  <span class="built_in">Symbol?</span> symbol;</span><br><span class="line">  Slug? slug;</span><br><span class="line">  <span class="built_in">String?</span> tokenAddress;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">factory</span> Platform.fromJson(<span class="built_in">String</span> str) =&gt; Platform.fromMap(json.decode(str));</span><br><span class="line"></span><br><span class="line">  <span class="built_in">String</span> toJson() =&gt; json.encode(toMap());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">factory</span> Platform.fromMap(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; json) =&gt; Platform(</span><br><span class="line">        id: json[<span class="string">&quot;id&quot;</span>] == <span class="keyword">null</span> ? <span class="keyword">null</span> : json[<span class="string">&quot;id&quot;</span>],</span><br><span class="line">        name: json[<span class="string">&quot;name&quot;</span>] == <span class="keyword">null</span> ? <span class="keyword">null</span> : nameValues.map[json[<span class="string">&quot;name&quot;</span>]],</span><br><span class="line">        symbol:</span><br><span class="line">            json[<span class="string">&quot;symbol&quot;</span>] == <span class="keyword">null</span> ? <span class="keyword">null</span> : symbolValues.map[json[<span class="string">&quot;symbol&quot;</span>]],</span><br><span class="line">        slug: json[<span class="string">&quot;slug&quot;</span>] == <span class="keyword">null</span> ? <span class="keyword">null</span> : slugValues.map[json[<span class="string">&quot;slug&quot;</span>]],</span><br><span class="line">        tokenAddress:</span><br><span class="line">            json[<span class="string">&quot;token_address&quot;</span>] == <span class="keyword">null</span> ? <span class="keyword">null</span> : json[<span class="string">&quot;token_address&quot;</span>],</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; toMap() =&gt; &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: id == <span class="keyword">null</span> ? <span class="keyword">null</span> : id,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: name == <span class="keyword">null</span> ? <span class="keyword">null</span> : nameValues.reverse[name],</span><br><span class="line">        <span class="string">&quot;symbol&quot;</span>: symbol == <span class="keyword">null</span> ? <span class="keyword">null</span> : symbolValues.reverse[symbol],</span><br><span class="line">        <span class="string">&quot;slug&quot;</span>: slug == <span class="keyword">null</span> ? <span class="keyword">null</span> : slugValues.reverse[slug],</span><br><span class="line">        <span class="string">&quot;token_address&quot;</span>: tokenAddress == <span class="keyword">null</span> ? <span class="keyword">null</span> : tokenAddress,</span><br><span class="line">      &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> Name &#123;</span><br><span class="line">  ETHEREUM,</span><br><span class="line">  BINANCE_CHAIN_BEP2,</span><br><span class="line">  BINANCE_SMART_CHAIN_BEP20,</span><br><span class="line">  TRON10,</span><br><span class="line">  KLAYTN,</span><br><span class="line">  TRON20</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> nameValues = EnumValues(&#123;</span><br><span class="line">  <span class="string">&quot;Binance Chain (BEP2)&quot;</span>: Name.BINANCE_CHAIN_BEP2,</span><br><span class="line">  <span class="string">&quot;Binance Smart Chain (BEP20)&quot;</span>: Name.BINANCE_SMART_CHAIN_BEP20,</span><br><span class="line">  <span class="string">&quot;Ethereum&quot;</span>: Name.ETHEREUM,</span><br><span class="line">  <span class="string">&quot;Klaytn&quot;</span>: Name.KLAYTN,</span><br><span class="line">  <span class="string">&quot;Tron10&quot;</span>: Name.TRON10,</span><br><span class="line">  <span class="string">&quot;Tron20&quot;</span>: Name.TRON20</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> Slug &#123; ETHEREUM, BINANCE_COIN, TRON, KLAYTN &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> slugValues = EnumValues(&#123;</span><br><span class="line">  <span class="string">&quot;binance-coin&quot;</span>: Slug.BINANCE_COIN,</span><br><span class="line">  <span class="string">&quot;ethereum&quot;</span>: Slug.ETHEREUM,</span><br><span class="line">  <span class="string">&quot;klaytn&quot;</span>: Slug.KLAYTN,</span><br><span class="line">  <span class="string">&quot;tron&quot;</span>: Slug.TRON</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="built_in">Symbol</span> &#123; ETH, BNB, TRX, KLAY &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> symbolValues = EnumValues(&#123;</span><br><span class="line">  <span class="string">&quot;BNB&quot;</span>: <span class="built_in">Symbol</span>.BNB,</span><br><span class="line">  <span class="string">&quot;ETH&quot;</span>: <span class="built_in">Symbol</span>.ETH,</span><br><span class="line">  <span class="string">&quot;KLAY&quot;</span>: <span class="built_in">Symbol</span>.KLAY,</span><br><span class="line">  <span class="string">&quot;TRX&quot;</span>: <span class="built_in">Symbol</span>.TRX</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Quote</span> </span>&#123;</span><br><span class="line">  Quote(&#123;</span><br><span class="line">    <span class="keyword">this</span>.usd,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  Usd? usd;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">factory</span> Quote.fromJson(<span class="built_in">String</span> str) =&gt; Quote.fromMap(json.decode(str));</span><br><span class="line"></span><br><span class="line">  <span class="built_in">String</span> toJson() =&gt; json.encode(toMap());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">factory</span> Quote.fromMap(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; json) =&gt; Quote(</span><br><span class="line">        usd: json[<span class="string">&quot;USD&quot;</span>] == <span class="keyword">null</span> ? <span class="keyword">null</span> : Usd.fromMap(json[<span class="string">&quot;USD&quot;</span>]),</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; toMap() =&gt; &#123;</span><br><span class="line">        <span class="string">&quot;USD&quot;</span>: usd == <span class="keyword">null</span> ? <span class="keyword">null</span> : usd!.toMap(),</span><br><span class="line">      &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Usd</span> </span>&#123;</span><br><span class="line">  Usd(&#123;</span><br><span class="line">    <span class="keyword">this</span>.price,</span><br><span class="line">    <span class="keyword">this</span>.volume24H,</span><br><span class="line">    <span class="keyword">this</span>.volumeChange24H,</span><br><span class="line">    <span class="keyword">this</span>.percentChange1H,</span><br><span class="line">    <span class="keyword">this</span>.percentChange24H,</span><br><span class="line">    <span class="keyword">this</span>.percentChange7D,</span><br><span class="line">    <span class="keyword">this</span>.percentChange30D,</span><br><span class="line">    <span class="keyword">this</span>.percentChange60D,</span><br><span class="line">    <span class="keyword">this</span>.percentChange90D,</span><br><span class="line">    <span class="keyword">this</span>.marketCap,</span><br><span class="line">    <span class="keyword">this</span>.marketCapDominance,</span><br><span class="line">    <span class="keyword">this</span>.fullyDilutedMarketCap,</span><br><span class="line">    <span class="keyword">this</span>.lastUpdated,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">double?</span> price;</span><br><span class="line">  <span class="built_in">double?</span> volume24H;</span><br><span class="line">  <span class="built_in">double?</span> volumeChange24H;</span><br><span class="line">  <span class="built_in">double?</span> percentChange1H;</span><br><span class="line">  <span class="built_in">double?</span> percentChange24H;</span><br><span class="line">  <span class="built_in">double?</span> percentChange7D;</span><br><span class="line">  <span class="built_in">double?</span> percentChange30D;</span><br><span class="line">  <span class="built_in">double?</span> percentChange60D;</span><br><span class="line">  <span class="built_in">double?</span> percentChange90D;</span><br><span class="line">  <span class="built_in">double?</span> marketCap;</span><br><span class="line">  <span class="built_in">double?</span> marketCapDominance;</span><br><span class="line">  <span class="built_in">double?</span> fullyDilutedMarketCap;</span><br><span class="line">  <span class="built_in">DateTime?</span> lastUpdated;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">factory</span> Usd.fromJson(<span class="built_in">String</span> str) =&gt; Usd.fromMap(json.decode(str));</span><br><span class="line"></span><br><span class="line">  <span class="built_in">String</span> toJson() =&gt; json.encode(toMap());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">factory</span> Usd.fromMap(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; json) =&gt; Usd(</span><br><span class="line">        price: json[<span class="string">&quot;price&quot;</span>] == <span class="keyword">null</span> ? <span class="keyword">null</span> : json[<span class="string">&quot;price&quot;</span>].toDouble(),</span><br><span class="line">        volume24H:</span><br><span class="line">            json[<span class="string">&quot;volume_24h&quot;</span>] == <span class="keyword">null</span> ? <span class="keyword">null</span> : json[<span class="string">&quot;volume_24h&quot;</span>].toDouble(),</span><br><span class="line">        volumeChange24H: json[<span class="string">&quot;volume_change_24h&quot;</span>] == <span class="keyword">null</span></span><br><span class="line">            ? <span class="keyword">null</span></span><br><span class="line">            : json[<span class="string">&quot;volume_change_24h&quot;</span>].toDouble(),</span><br><span class="line">        percentChange1H: json[<span class="string">&quot;percent_change_1h&quot;</span>] == <span class="keyword">null</span></span><br><span class="line">            ? <span class="keyword">null</span></span><br><span class="line">            : json[<span class="string">&quot;percent_change_1h&quot;</span>].toDouble(),</span><br><span class="line">        percentChange24H: json[<span class="string">&quot;percent_change_24h&quot;</span>] == <span class="keyword">null</span></span><br><span class="line">            ? <span class="keyword">null</span></span><br><span class="line">            : json[<span class="string">&quot;percent_change_24h&quot;</span>].toDouble(),</span><br><span class="line">        percentChange7D: json[<span class="string">&quot;percent_change_7d&quot;</span>] == <span class="keyword">null</span></span><br><span class="line">            ? <span class="keyword">null</span></span><br><span class="line">            : json[<span class="string">&quot;percent_change_7d&quot;</span>].toDouble(),</span><br><span class="line">        percentChange30D: json[<span class="string">&quot;percent_change_30d&quot;</span>] == <span class="keyword">null</span></span><br><span class="line">            ? <span class="keyword">null</span></span><br><span class="line">            : json[<span class="string">&quot;percent_change_30d&quot;</span>].toDouble(),</span><br><span class="line">        percentChange60D: json[<span class="string">&quot;percent_change_60d&quot;</span>] == <span class="keyword">null</span></span><br><span class="line">            ? <span class="keyword">null</span></span><br><span class="line">            : json[<span class="string">&quot;percent_change_60d&quot;</span>].toDouble(),</span><br><span class="line">        percentChange90D: json[<span class="string">&quot;percent_change_90d&quot;</span>] == <span class="keyword">null</span></span><br><span class="line">            ? <span class="keyword">null</span></span><br><span class="line">            : json[<span class="string">&quot;percent_change_90d&quot;</span>].toDouble(),</span><br><span class="line">        marketCap:</span><br><span class="line">            json[<span class="string">&quot;market_cap&quot;</span>] == <span class="keyword">null</span> ? <span class="keyword">null</span> : json[<span class="string">&quot;market_cap&quot;</span>].toDouble(),</span><br><span class="line">        marketCapDominance: json[<span class="string">&quot;market_cap_dominance&quot;</span>] == <span class="keyword">null</span></span><br><span class="line">            ? <span class="keyword">null</span></span><br><span class="line">            : json[<span class="string">&quot;market_cap_dominance&quot;</span>].toDouble(),</span><br><span class="line">        fullyDilutedMarketCap: json[<span class="string">&quot;fully_diluted_market_cap&quot;</span>] == <span class="keyword">null</span></span><br><span class="line">            ? <span class="keyword">null</span></span><br><span class="line">            : json[<span class="string">&quot;fully_diluted_market_cap&quot;</span>].toDouble(),</span><br><span class="line">        lastUpdated: json[<span class="string">&quot;last_updated&quot;</span>] == <span class="keyword">null</span></span><br><span class="line">            ? <span class="keyword">null</span></span><br><span class="line">            : <span class="built_in">DateTime</span>.parse(json[<span class="string">&quot;last_updated&quot;</span>]),</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; toMap() =&gt; &#123;</span><br><span class="line">        <span class="string">&quot;price&quot;</span>: price == <span class="keyword">null</span> ? <span class="keyword">null</span> : price,</span><br><span class="line">        <span class="string">&quot;volume_24h&quot;</span>: volume24H == <span class="keyword">null</span> ? <span class="keyword">null</span> : volume24H,</span><br><span class="line">        <span class="string">&quot;volume_change_24h&quot;</span>: volumeChange24H == <span class="keyword">null</span> ? <span class="keyword">null</span> : volumeChange24H,</span><br><span class="line">        <span class="string">&quot;percent_change_1h&quot;</span>: percentChange1H == <span class="keyword">null</span> ? <span class="keyword">null</span> : percentChange1H,</span><br><span class="line">        <span class="string">&quot;percent_change_24h&quot;</span>:</span><br><span class="line">            percentChange24H == <span class="keyword">null</span> ? <span class="keyword">null</span> : percentChange24H,</span><br><span class="line">        <span class="string">&quot;percent_change_7d&quot;</span>: percentChange7D == <span class="keyword">null</span> ? <span class="keyword">null</span> : percentChange7D,</span><br><span class="line">        <span class="string">&quot;percent_change_30d&quot;</span>:</span><br><span class="line">            percentChange30D == <span class="keyword">null</span> ? <span class="keyword">null</span> : percentChange30D,</span><br><span class="line">        <span class="string">&quot;percent_change_60d&quot;</span>:</span><br><span class="line">            percentChange60D == <span class="keyword">null</span> ? <span class="keyword">null</span> : percentChange60D,</span><br><span class="line">        <span class="string">&quot;percent_change_90d&quot;</span>:</span><br><span class="line">            percentChange90D == <span class="keyword">null</span> ? <span class="keyword">null</span> : percentChange90D,</span><br><span class="line">        <span class="string">&quot;market_cap&quot;</span>: marketCap == <span class="keyword">null</span> ? <span class="keyword">null</span> : marketCap,</span><br><span class="line">        <span class="string">&quot;market_cap_dominance&quot;</span>:</span><br><span class="line">            marketCapDominance == <span class="keyword">null</span> ? <span class="keyword">null</span> : marketCapDominance,</span><br><span class="line">        <span class="string">&quot;fully_diluted_market_cap&quot;</span>:</span><br><span class="line">            fullyDilutedMarketCap == <span class="keyword">null</span> ? <span class="keyword">null</span> : fullyDilutedMarketCap,</span><br><span class="line">        <span class="string">&quot;last_updated&quot;</span>:</span><br><span class="line">            lastUpdated == <span class="keyword">null</span> ? <span class="keyword">null</span> : lastUpdated!.toIso8601String(),</span><br><span class="line">      &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Status</span> </span>&#123;</span><br><span class="line">  Status(&#123;</span><br><span class="line">    <span class="keyword">this</span>.timestamp,</span><br><span class="line">    <span class="keyword">this</span>.errorCode,</span><br><span class="line">    <span class="keyword">this</span>.errorMessage,</span><br><span class="line">    <span class="keyword">this</span>.elapsed,</span><br><span class="line">    <span class="keyword">this</span>.creditCount,</span><br><span class="line">    <span class="keyword">this</span>.notice,</span><br><span class="line">    <span class="keyword">this</span>.totalCount,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">DateTime?</span> timestamp;</span><br><span class="line">  <span class="built_in">int?</span> errorCode;</span><br><span class="line">  dynamic? errorMessage;</span><br><span class="line">  <span class="built_in">int?</span> elapsed;</span><br><span class="line">  <span class="built_in">int?</span> creditCount;</span><br><span class="line">  dynamic? notice;</span><br><span class="line">  <span class="built_in">int?</span> totalCount;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">factory</span> Status.fromJson(<span class="built_in">String</span> str) =&gt; Status.fromMap(json.decode(str));</span><br><span class="line"></span><br><span class="line">  <span class="built_in">String</span> toJson() =&gt; json.encode(toMap());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">factory</span> Status.fromMap(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; json) =&gt; Status(</span><br><span class="line">        timestamp: json[<span class="string">&quot;timestamp&quot;</span>] == <span class="keyword">null</span></span><br><span class="line">            ? <span class="keyword">null</span></span><br><span class="line">            : <span class="built_in">DateTime</span>.parse(json[<span class="string">&quot;timestamp&quot;</span>]),</span><br><span class="line">        errorCode: json[<span class="string">&quot;error_code&quot;</span>] == <span class="keyword">null</span> ? <span class="keyword">null</span> : json[<span class="string">&quot;error_code&quot;</span>],</span><br><span class="line">        errorMessage: json[<span class="string">&quot;error_message&quot;</span>],</span><br><span class="line">        elapsed: json[<span class="string">&quot;elapsed&quot;</span>] == <span class="keyword">null</span> ? <span class="keyword">null</span> : json[<span class="string">&quot;elapsed&quot;</span>],</span><br><span class="line">        creditCount: json[<span class="string">&quot;credit_count&quot;</span>] == <span class="keyword">null</span> ? <span class="keyword">null</span> : json[<span class="string">&quot;credit_count&quot;</span>],</span><br><span class="line">        notice: json[<span class="string">&quot;notice&quot;</span>],</span><br><span class="line">        totalCount: json[<span class="string">&quot;total_count&quot;</span>] == <span class="keyword">null</span> ? <span class="keyword">null</span> : json[<span class="string">&quot;total_count&quot;</span>],</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; toMap() =&gt; &#123;</span><br><span class="line">        <span class="string">&quot;timestamp&quot;</span>: timestamp == <span class="keyword">null</span> ? <span class="keyword">null</span> : timestamp!.toIso8601String(),</span><br><span class="line">        <span class="string">&quot;error_code&quot;</span>: errorCode == <span class="keyword">null</span> ? <span class="keyword">null</span> : errorCode,</span><br><span class="line">        <span class="string">&quot;error_message&quot;</span>: errorMessage,</span><br><span class="line">        <span class="string">&quot;elapsed&quot;</span>: elapsed == <span class="keyword">null</span> ? <span class="keyword">null</span> : elapsed,</span><br><span class="line">        <span class="string">&quot;credit_count&quot;</span>: creditCount == <span class="keyword">null</span> ? <span class="keyword">null</span> : creditCount,</span><br><span class="line">        <span class="string">&quot;notice&quot;</span>: notice,</span><br><span class="line">        <span class="string">&quot;total_count&quot;</span>: totalCount == <span class="keyword">null</span> ? <span class="keyword">null</span> : totalCount,</span><br><span class="line">      &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EnumValues</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, T&gt; map;</span><br><span class="line">  <span class="keyword">late</span> <span class="built_in">Map</span>&lt;T, <span class="built_in">String</span>&gt; reverseMap;</span><br><span class="line"></span><br><span class="line">  EnumValues(<span class="keyword">this</span>.map);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Map</span>&lt;T, <span class="built_in">String</span>&gt; <span class="keyword">get</span> reverse &#123;</span><br><span class="line">    <span class="keyword">if</span> (reverseMap == <span class="keyword">null</span>) &#123;</span><br><span class="line">      reverseMap = map.map((k, v) =&gt; <span class="keyword">new</span> MapEntry(v, k));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> reverseMap;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>models.dart:</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="string">&#x27;./payload_model.dart&#x27;</span>;</span><br></pre></td></tr></table></figure>

<hr>
<p>services/payload_service.dart:</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:developer&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter_get_balance/core/models/models.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:http/http.dart&#x27;</span> <span class="keyword">as</span> http;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PayloadService</span> </span>&#123;</span><br><span class="line">  Future&lt;PayloadModel?&gt; getCryptoPrices() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> key = <span class="string">&#x27;*******-****-****-****-************&#x27;</span>; <span class="comment">// add your api key here</span></span><br><span class="line">      <span class="keyword">var</span> headers = &#123;</span><br><span class="line">        <span class="string">&#x27;X-CMC_PRO_API_KEY&#x27;</span>: key,</span><br><span class="line">        <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">var</span> url = <span class="built_in">Uri</span>.parse(</span><br><span class="line">          <span class="string">&#x27;https://pro-api.coinmarketcap.com/v1/cryptocurrency/listings/latest&#x27;</span>);</span><br><span class="line">      <span class="keyword">final</span> response = <span class="keyword">await</span> http.<span class="keyword">get</span>(url, headers: headers);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (response.statusCode == <span class="number">200</span>) &#123;</span><br><span class="line">        PayloadModel payload = PayloadModel.fromJson(response.body);</span><br><span class="line">        <span class="keyword">return</span> payload;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        log(<span class="string">&#x27;請求失敗&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      log(<span class="string">&#x27;post fetch and set catch error&#x27;</span>, error: err);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>services.dart:</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="string">&#x27;./payload_service.dart&#x27;</span>;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h2><p>ui/home_screen.dart:</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter_get_balance/core/models/models.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter_get_balance/core/services/services.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeScreen</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> HomeScreen(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _HomeScreenState createState() =&gt; _HomeScreenState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_HomeScreenState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">HomeScreen</span>&gt; </span>&#123;</span><br><span class="line">  PayloadService service = PayloadService();</span><br><span class="line">  <span class="keyword">late</span> Future&lt;PayloadModel?&gt; _future;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement initState</span></span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    _future = service.getCryptoPrices();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: <span class="keyword">const</span> Text(<span class="string">&#x27;Cryptos&#x27;</span>),</span><br><span class="line">        ),</span><br><span class="line">        <span class="comment">// body: ListView.builder(</span></span><br><span class="line">        <span class="comment">//     itemCount: _payload?.data.length,</span></span><br><span class="line">        <span class="comment">//     itemBuilder: (context, index) &#123;</span></span><br><span class="line">        <span class="comment">//       return Card(</span></span><br><span class="line">        <span class="comment">//         elevation: 6.0,</span></span><br><span class="line">        <span class="comment">//         child: Padding(</span></span><br><span class="line">        <span class="comment">//           padding: const EdgeInsets.only(</span></span><br><span class="line">        <span class="comment">//               top: 6.0, bottom: 6.0, left: 8.0, right: 8.0),</span></span><br><span class="line">        <span class="comment">//           child: Row(</span></span><br><span class="line">        <span class="comment">//             crossAxisAlignment: CrossAxisAlignment.start,</span></span><br><span class="line">        <span class="comment">//             children: &lt;Widget&gt;[</span></span><br><span class="line">        <span class="comment">//               Text(_payload?.data[index].name ?? &#x27;&#x27;),</span></span><br><span class="line">        <span class="comment">//               const Spacer(),</span></span><br><span class="line">        <span class="comment">//               Text(_payload?.data[index].lastUpdated!.toIso8601String() ??</span></span><br><span class="line">        <span class="comment">//                   &#x27;&#x27;),</span></span><br><span class="line">        <span class="comment">//               const Spacer(),</span></span><br><span class="line">        <span class="comment">//               Text(</span></span><br><span class="line">        <span class="comment">//                 _payload?.data[index].quote!.usd!.price.toString() ?? &#x27;&#x27;,</span></span><br><span class="line">        <span class="comment">//               ),</span></span><br><span class="line">        <span class="comment">//             ],</span></span><br><span class="line">        <span class="comment">//           ),</span></span><br><span class="line">        <span class="comment">//         ),</span></span><br><span class="line">        <span class="comment">//       );</span></span><br><span class="line">        <span class="comment">//     &#125;),</span></span><br><span class="line">        body: FutureBuilder(</span><br><span class="line">            future: _future,</span><br><span class="line">            builder: (context, AsyncSnapshot&lt;PayloadModel?&gt; snapshot) &#123;</span><br><span class="line">              <span class="keyword">switch</span> (snapshot.connectionState) &#123;</span><br><span class="line">                <span class="keyword">case</span> ConnectionState.none:</span><br><span class="line">                  <span class="keyword">return</span> Text(<span class="string">&#x27;none&#x27;</span>);</span><br><span class="line">                <span class="keyword">case</span> ConnectionState.waiting:</span><br><span class="line">                  <span class="keyword">return</span> Center(child: CircularProgressIndicator());</span><br><span class="line">                <span class="keyword">case</span> ConnectionState.active:</span><br><span class="line">                  <span class="keyword">return</span> Text(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">                <span class="keyword">case</span> ConnectionState.done:</span><br><span class="line">                  <span class="keyword">if</span> (snapshot.hasError) &#123;</span><br><span class="line">                    <span class="keyword">return</span> Text(</span><br><span class="line">                      <span class="string">&#x27;<span class="subst">$&#123;snapshot.error&#125;</span>&#x27;</span>,</span><br><span class="line">                      style: TextStyle(color: Colors.red),</span><br><span class="line">                    );</span><br><span class="line">                  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> ListView.builder(</span><br><span class="line">                        itemCount: snapshot.data?.data!.length,</span><br><span class="line">                        itemBuilder: (context, index) &#123;</span><br><span class="line">                          <span class="keyword">return</span> Card(</span><br><span class="line">                              elevation: <span class="number">6.0</span>,</span><br><span class="line">                              child: Padding(</span><br><span class="line">                                padding: <span class="keyword">const</span> EdgeInsets.only(</span><br><span class="line">                                    top: <span class="number">6.0</span>,</span><br><span class="line">                                    bottom: <span class="number">6.0</span>,</span><br><span class="line">                                    left: <span class="number">8.0</span>,</span><br><span class="line">                                    right: <span class="number">8.0</span>),</span><br><span class="line">                                child: Row(</span><br><span class="line">                                  crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class="line">                                  children: &lt;Widget&gt;[</span><br><span class="line">                                    Text(snapshot.data?.data?[index].name ??</span><br><span class="line">                                        <span class="string">&#x27;Name Null&#x27;</span>),</span><br><span class="line">                                    Spacer(),</span><br><span class="line">                                    Text(snapshot.data?.data?[index].lastUpdated</span><br><span class="line">                                            ?.toIso8601String() ??</span><br><span class="line">                                        <span class="string">&#x27;lastUpdated null&#x27;</span>),</span><br><span class="line">                                    Spacer(),</span><br><span class="line">                                    Text(</span><br><span class="line">                                      snapshot.data?.data?[index].quote?.usd</span><br><span class="line">                                              ?.price</span><br><span class="line">                                              .toString() ??</span><br><span class="line">                                          <span class="string">&#x27;price null&#x27;</span>,</span><br><span class="line">                                    ),</span><br><span class="line">                                  ],</span><br><span class="line">                                ),</span><br><span class="line">                              ));</span><br><span class="line">                        &#125;);</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>main:</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter_get_balance/ui/home_screen.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(<span class="keyword">const</span> MyApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyApp(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// This widget is the root of your application.</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;Flutter Demo&#x27;</span>,</span><br><span class="line">      theme: ThemeData(</span><br><span class="line">        <span class="comment">// This is the theme of your application.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// Try running your application with &quot;flutter run&quot;. You&#x27;ll see the</span></span><br><span class="line">        <span class="comment">// application has a blue toolbar. Then, without quitting the app, try</span></span><br><span class="line">        <span class="comment">// changing the primarySwatch below to Colors.green and then invoke</span></span><br><span class="line">        <span class="comment">// &quot;hot reload&quot; (press &quot;r&quot; in the console where you ran &quot;flutter run&quot;,</span></span><br><span class="line">        <span class="comment">// or simply save your changes to &quot;hot reload&quot; in a Flutter IDE).</span></span><br><span class="line">        <span class="comment">// Notice that the counter didn&#x27;t reset back to zero; the application</span></span><br><span class="line">        <span class="comment">// is not restarted.</span></span><br><span class="line">        primarySwatch: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">      home: HomeScreen(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><p><img data-src="/2022/flutter/f1115703de2c/app-test.gif" alt="test gif"></p>
<p><img data-src="/2022/flutter/f1115703de2c/2022-01-08-13-31-38.png" alt="http"></p>
<p><img data-src="/2022/flutter/f1115703de2c/2022-01-08-13-31-59.png" alt="response"></p>
]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
        <tag>restful</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter串接restful api</title>
    <url>/2021/flutter/6e0c59bbcd74/</url>
    <content><![CDATA[<h1 id="Flutter串接restful-api"><a href="#Flutter串接restful-api" class="headerlink" title="Flutter串接restful api"></a>Flutter串接restful api</h1><h2 id="創建新專案"><a href="#創建新專案" class="headerlink" title="創建新專案"></a>創建新專案</h2><p>架構:<br><img data-src="/2021/flutter/6e0c59bbcd74/2022-01-03-12-59-32.png" alt="Image"></p>
<p>package<br><img data-src="/2021/flutter/6e0c59bbcd74/2022-01-03-13-00-12.png" alt="pubspec"></p>
<p>使用JSONPlaceholder測試:<br><a href="https://jsonplaceholder.typicode.com/">JSONPlaceholder</a></p>
<p>使用quicktype將json檔案轉承我們要的形式:<br><a href="https://app.quicktype.io/">quicktype</a></p>
<p>測試使用<a href="https://jsonplaceholder.typicode.com/posts">posts</a>:</p>
<p><img data-src="/2021/flutter/6e0c59bbcd74/2021-12-29-14-19-09.png" alt="image2"></p>
<hr>
<h2 id="建立Model"><a href="#建立Model" class="headerlink" title="建立Model"></a>建立Model</h2><p>在models裡新增post_model:</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:convert&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostModel</span> </span>&#123;</span><br><span class="line">  PostModel(&#123;</span><br><span class="line">    <span class="keyword">this</span>.userId,</span><br><span class="line">    <span class="keyword">this</span>.id,</span><br><span class="line">    <span class="keyword">this</span>.title,</span><br><span class="line">    <span class="keyword">this</span>.body,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">int</span> userId;</span><br><span class="line">  <span class="built_in">int</span> id;</span><br><span class="line">  <span class="built_in">String</span> title;</span><br><span class="line">  <span class="built_in">String</span> body;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">factory</span> PostModel.fromJson(<span class="built_in">String</span> str) =&gt; PostModel.fromMap(json.decode(str));</span><br><span class="line"></span><br><span class="line">  <span class="built_in">String</span> toJson() =&gt; json.encode(toMap());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">factory</span> PostModel.fromMap(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; json) =&gt; PostModel(</span><br><span class="line">        userId: json[<span class="string">&quot;userId&quot;</span>] == <span class="keyword">null</span> ? <span class="keyword">null</span> : json[<span class="string">&quot;userId&quot;</span>],</span><br><span class="line">        id: json[<span class="string">&quot;id&quot;</span>] == <span class="keyword">null</span> ? <span class="keyword">null</span> : json[<span class="string">&quot;id&quot;</span>],</span><br><span class="line">        title: json[<span class="string">&quot;title&quot;</span>] == <span class="keyword">null</span> ? <span class="keyword">null</span> : json[<span class="string">&quot;title&quot;</span>],</span><br><span class="line">        body: json[<span class="string">&quot;body&quot;</span>] == <span class="keyword">null</span> ? <span class="keyword">null</span> : json[<span class="string">&quot;body&quot;</span>],</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; toMap() =&gt; &#123;</span><br><span class="line">        <span class="string">&quot;userId&quot;</span>: userId == <span class="keyword">null</span> ? <span class="keyword">null</span> : userId,</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: id == <span class="keyword">null</span> ? <span class="keyword">null</span> : id,</span><br><span class="line">        <span class="string">&quot;title&quot;</span>: title == <span class="keyword">null</span> ? <span class="keyword">null</span> : title,</span><br><span class="line">        <span class="string">&quot;body&quot;</span>: body == <span class="keyword">null</span> ? <span class="keyword">null</span> : body,</span><br><span class="line">      &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>稍微修改</strong>(with null-safety):</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:convert&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostModel</span> </span>&#123;</span><br><span class="line">  PostModel(&#123;</span><br><span class="line">    <span class="keyword">this</span>.userId,</span><br><span class="line">    <span class="keyword">this</span>.id,</span><br><span class="line">    <span class="keyword">this</span>.title,</span><br><span class="line">    <span class="keyword">this</span>.body,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">int?</span> userId;</span><br><span class="line">  <span class="built_in">int?</span> id;</span><br><span class="line">  <span class="built_in">String?</span> title;</span><br><span class="line">  <span class="built_in">String?</span> body;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">factory</span> PostModel.fromJson(<span class="built_in">String</span> str) =&gt; PostModel.fromMap(json.decode(str));</span><br><span class="line"></span><br><span class="line">  <span class="built_in">String</span> toJson() =&gt; json.encode(toMap());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">factory</span> PostModel.fromMap(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; json) =&gt; PostModel(</span><br><span class="line">        userId: json[<span class="string">&quot;userId&quot;</span>] ?? json[<span class="string">&quot;userId&quot;</span>],</span><br><span class="line">        id: json[<span class="string">&quot;id&quot;</span>] ?? json[<span class="string">&quot;id&quot;</span>],</span><br><span class="line">        title: json[<span class="string">&quot;title&quot;</span>] ?? json[<span class="string">&quot;title&quot;</span>],</span><br><span class="line">        body: json[<span class="string">&quot;body&quot;</span>] ?? json[<span class="string">&quot;body&quot;</span>],</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; toMap() =&gt; &#123;</span><br><span class="line">        <span class="string">&quot;userId&quot;</span>: userId ?? userId,</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: id ?? id,</span><br><span class="line">        <span class="string">&quot;title&quot;</span>: title ?? title,</span><br><span class="line">        <span class="string">&quot;body&quot;</span>: body ?? body,</span><br><span class="line">      &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>models.dart:</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="string">&#x27;./post_model.dart&#x27;</span>;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="建立service"><a href="#建立service" class="headerlink" title="建立service"></a>建立service</h2><p>在services裡新增post_service:</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:convert&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:developer&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter_restful/core/models/models.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:http/http.dart&#x27;</span> <span class="keyword">as</span> http;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostService</span> </span>&#123;</span><br><span class="line">  Future&lt;PostModel?&gt; findById(<span class="built_in">String</span> id) <span class="keyword">async</span> &#123;</span><br><span class="line">    PostModel post;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> headers = &#123;<span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>&#125;;</span><br><span class="line">      <span class="keyword">var</span> url = <span class="built_in">Uri</span>.parse(<span class="string">&#x27;https://jsonplaceholder.typicode.com/posts/<span class="subst">$id</span>&#x27;</span>);</span><br><span class="line">      <span class="keyword">final</span> response = <span class="keyword">await</span> http.<span class="keyword">get</span>(url, headers: headers);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (response.statusCode == <span class="number">200</span>) &#123;</span><br><span class="line">        post = PostModel.fromJson(response.body);</span><br><span class="line">        <span class="keyword">return</span> post;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        log(<span class="string">&#x27;請求失敗&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      log(<span class="string">&#x27;post fetch and set catch error&#x27;</span>, error: err);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Future&lt;<span class="built_in">List</span>&lt;PostModel&gt;&gt; findAll() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> headers = &#123;<span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>&#125;;</span><br><span class="line">      <span class="keyword">var</span> url = <span class="built_in">Uri</span>.parse(<span class="string">&#x27;https://jsonplaceholder.typicode.com/posts&#x27;</span>);</span><br><span class="line">      <span class="keyword">final</span> response = <span class="keyword">await</span> http.<span class="keyword">get</span>(url, headers: headers);</span><br><span class="line">      <span class="keyword">final</span> extractedData = json.decode(response.body);</span><br><span class="line">      <span class="keyword">final</span> <span class="built_in">List</span>&lt;PostModel&gt; loadedposts = [];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> data <span class="keyword">in</span> extractedData) &#123;</span><br><span class="line">        loadedposts.add(PostModel(</span><br><span class="line">          id: data[<span class="string">&#x27;id&#x27;</span>],</span><br><span class="line">          userId: data[<span class="string">&#x27;userId&#x27;</span>],</span><br><span class="line">          title: data[<span class="string">&#x27;title&#x27;</span>],</span><br><span class="line">          body: data[<span class="string">&#x27;body&#x27;</span>],</span><br><span class="line">        ));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> loadedposts;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      log(<span class="string">&#x27;posts fetch and set catch error&#x27;</span>, error: err);</span><br><span class="line">      <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Future&lt;PostModel&gt; create(PostModel post, [<span class="built_in">String</span> token = <span class="string">&#x27;&#x27;</span>]) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> headers = &#123;</span><br><span class="line">        <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Authorization&#x27;</span>: token,</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">var</span> url = <span class="built_in">Uri</span>.parse(<span class="string">&#x27;https://jsonplaceholder.typicode.com/posts&#x27;</span>);</span><br><span class="line">      <span class="keyword">final</span> response = <span class="keyword">await</span> http.post(</span><br><span class="line">        url,</span><br><span class="line">        headers: headers,</span><br><span class="line">        body: json.encode(&#123;</span><br><span class="line">          <span class="string">&#x27;id&#x27;</span>: post.id,</span><br><span class="line">          <span class="string">&#x27;userId&#x27;</span>: post.userId,</span><br><span class="line">          <span class="string">&#x27;title&#x27;</span>: post.title,</span><br><span class="line">          <span class="string">&#x27;body&#x27;</span>: post.body,</span><br><span class="line">        &#125;),</span><br><span class="line">      );</span><br><span class="line">      log(response.body);</span><br><span class="line">      <span class="keyword">return</span> PostModel.fromJson(response.body);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      log(<span class="string">&#x27;Add error, &#x27;</span>, error: err);</span><br><span class="line">      <span class="keyword">throw</span> Exception(err);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Future&lt;PostModel&gt; delete(<span class="built_in">String</span> postId, [<span class="built_in">String</span> token = <span class="string">&#x27;&#x27;</span>]) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> headers = &#123;</span><br><span class="line">        <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Authorization&#x27;</span>: token,</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">var</span> url = <span class="built_in">Uri</span>.parse(<span class="string">&#x27;https://jsonplaceholder.typicode.com/posts/<span class="subst">$postId</span>&#x27;</span>);</span><br><span class="line">      <span class="keyword">final</span> response = <span class="keyword">await</span> http.delete(</span><br><span class="line">        url,</span><br><span class="line">        headers: headers,</span><br><span class="line">      );</span><br><span class="line">      log(response.body);</span><br><span class="line">      <span class="keyword">if</span> (response.statusCode == <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> PostModel.fromJson(response.body);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> Exception(<span class="string">&#x27;Failed to delete post&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      log(<span class="string">&#x27;Delete error, &#x27;</span>, error: err);</span><br><span class="line">      <span class="keyword">throw</span> Exception(err);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Future&lt;PostModel&gt; edit(<span class="built_in">String</span> postId, PostModel post,</span><br><span class="line">      [<span class="built_in">String</span> token = <span class="string">&#x27;&#x27;</span>]) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> headers = &#123;</span><br><span class="line">        <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json; charset=UTF-8&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Authorization&#x27;</span>: token,</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">var</span> url = <span class="built_in">Uri</span>.parse(<span class="string">&#x27;https://jsonplaceholder.typicode.com/posts/<span class="subst">$postId</span>&#x27;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">final</span> response = <span class="keyword">await</span> http.put(</span><br><span class="line">        url,</span><br><span class="line">        headers: headers,</span><br><span class="line">        body: json.encode(&#123;</span><br><span class="line">          <span class="string">&#x27;id&#x27;</span>: post.id,</span><br><span class="line">          <span class="string">&#x27;userId&#x27;</span>: post.userId,</span><br><span class="line">          <span class="string">&#x27;title&#x27;</span>: post.title,</span><br><span class="line">          <span class="string">&#x27;body&#x27;</span>: post.body,</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="comment">// body: post.toJson()</span></span><br><span class="line">      );</span><br><span class="line">      log(response.body);</span><br><span class="line">      <span class="keyword">if</span> (response.statusCode == <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> PostModel.fromJson(response.body);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> Exception(<span class="string">&#x27;Failed to edit post&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      log(<span class="string">&#x27;Edit error, &#x27;</span>, error: err);</span><br><span class="line">      <span class="keyword">throw</span> Exception(err);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>services.dart:</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="string">&#x27;./post_service.dart&#x27;</span>;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h2><p>home_screen.dart:</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter_restful/core/models/models.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter_restful/core/services/post_service.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter_restful/ui/post_detail_screen.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeScreen</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> HomeScreen(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _HomeScreenState createState() =&gt; _HomeScreenState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_HomeScreenState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">HomeScreen</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> _formKey = GlobalKey&lt;FormState&gt;();</span><br><span class="line">  <span class="keyword">final</span> TextEditingController _titleController = TextEditingController();</span><br><span class="line">  <span class="keyword">final</span> TextEditingController _contentController = TextEditingController();</span><br><span class="line"></span><br><span class="line">  PostService post = PostService();</span><br><span class="line">  PostModel model = PostModel();</span><br><span class="line">  <span class="built_in">List</span>&lt;PostModel&gt; _posts = [];</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement initState</span></span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    post.findAll().then((value) &#123;</span><br><span class="line">      setState(() &#123;</span><br><span class="line">        _posts = value;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      body: ListView.builder(</span><br><span class="line">        itemCount: _posts.length,</span><br><span class="line">        itemBuilder: (context, index) &#123;</span><br><span class="line">          PostModel _post = _posts[index];</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span> ListTile(</span><br><span class="line">            title: Text(_post.title ?? <span class="string">&#x27;&#x27;</span>),</span><br><span class="line">            dense: <span class="keyword">true</span>,</span><br><span class="line">            onTap: () &#123;</span><br><span class="line">              Navigator.push(</span><br><span class="line">                  context,</span><br><span class="line">                  MaterialPageRoute(</span><br><span class="line">                      builder: (context) =&gt; PostDetailScreen(</span><br><span class="line">                            post: _post,</span><br><span class="line">                          )));</span><br><span class="line">            &#125;,</span><br><span class="line">            trailing: Wrap(</span><br><span class="line">              spacing: <span class="number">12</span>, <span class="comment">// space between two icons</span></span><br><span class="line">              children: &lt;Widget&gt;[</span><br><span class="line">                IconButton(</span><br><span class="line">                  onPressed: () &#123;</span><br><span class="line">                    post.delete(index.toString());</span><br><span class="line">                    setState(() &#123;</span><br><span class="line">                      _posts.removeAt(index);</span><br><span class="line">                    &#125;);</span><br><span class="line">                  &#125;,</span><br><span class="line">                  icon: <span class="keyword">const</span> Icon(Icons.delete),</span><br><span class="line">                ),</span><br><span class="line">                IconButton(</span><br><span class="line">                  onPressed: () &#123;</span><br><span class="line">                    showDialog(</span><br><span class="line">                        context: context,</span><br><span class="line">                        builder: (BuildContext context) &#123;</span><br><span class="line">                          <span class="keyword">return</span> AlertDialog(</span><br><span class="line">                            content: Stack(</span><br><span class="line">                              clipBehavior: Clip.none,</span><br><span class="line">                              children: &lt;Widget&gt;[</span><br><span class="line">                                Positioned(</span><br><span class="line">                                  right: <span class="number">-40.0</span>,</span><br><span class="line">                                  top: <span class="number">-40.0</span>,</span><br><span class="line">                                  child: InkResponse(</span><br><span class="line">                                    onTap: () &#123;</span><br><span class="line">                                      Navigator.of(context).pop();</span><br><span class="line">                                    &#125;,</span><br><span class="line">                                    child: <span class="keyword">const</span> CircleAvatar(</span><br><span class="line">                                      child: Icon(Icons.close),</span><br><span class="line">                                      backgroundColor: Colors.red,</span><br><span class="line">                                    ),</span><br><span class="line">                                  ),</span><br><span class="line">                                ),</span><br><span class="line">                                Form(</span><br><span class="line">                                  key: _formKey,</span><br><span class="line">                                  child: Column(</span><br><span class="line">                                    mainAxisSize: MainAxisSize.min,</span><br><span class="line">                                    children: &lt;Widget&gt;[</span><br><span class="line">                                      <span class="keyword">const</span> Text(<span class="string">&#x27;Edit Post&#x27;</span>),</span><br><span class="line">                                      Padding(</span><br><span class="line">                                        padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">8.0</span>),</span><br><span class="line">                                        child: TextFormField(</span><br><span class="line">                                          decoration: <span class="keyword">const</span> InputDecoration(</span><br><span class="line">                                            labelText: <span class="string">&quot;title&quot;</span>,</span><br><span class="line">                                          ),</span><br><span class="line">                                          initialValue: _posts[index].title,</span><br><span class="line">                                          onSaved: (value) &#123;</span><br><span class="line">                                            model.title = value;</span><br><span class="line">                                          &#125;,</span><br><span class="line">                                        ),</span><br><span class="line">                                      ),</span><br><span class="line">                                      Padding(</span><br><span class="line">                                        padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">8.0</span>),</span><br><span class="line">                                        child: TextFormField(</span><br><span class="line">                                          decoration: <span class="keyword">const</span> InputDecoration(</span><br><span class="line">                                            labelText: <span class="string">&quot;content&quot;</span>,</span><br><span class="line">                                          ),</span><br><span class="line">                                          initialValue: _posts[index].body,</span><br><span class="line">                                          onSaved: (value) &#123;</span><br><span class="line">                                            model.body = value;</span><br><span class="line">                                          &#125;,</span><br><span class="line">                                        ),</span><br><span class="line">                                      ),</span><br><span class="line">                                      Padding(</span><br><span class="line">                                        padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">8.0</span>),</span><br><span class="line">                                        child: ElevatedButton(</span><br><span class="line">                                          child: <span class="keyword">const</span> Text(<span class="string">&quot;Edit&quot;</span>),</span><br><span class="line">                                          onPressed: () &#123;</span><br><span class="line">                                            <span class="keyword">if</span> (_formKey.currentState!</span><br><span class="line">                                                .validate()) &#123;</span><br><span class="line">                                              _formKey.currentState!.save();</span><br><span class="line">                                              model.userId = <span class="number">1</span>;</span><br><span class="line">                                              model.id = _posts[index].id;</span><br><span class="line">                                              post</span><br><span class="line">                                                  .edit(</span><br><span class="line">                                                      _posts[index]</span><br><span class="line">                                                          .id</span><br><span class="line">                                                          .toString(),</span><br><span class="line">                                                      model)</span><br><span class="line">                                                  .then(</span><br><span class="line">                                                (value) &#123;</span><br><span class="line">                                                  setState(() &#123;</span><br><span class="line">                                                    _posts[index] = value;</span><br><span class="line">                                                  &#125;);</span><br><span class="line">                                                &#125;,</span><br><span class="line">                                              );</span><br><span class="line">                                              Navigator.of(context).pop();</span><br><span class="line">                                            &#125;</span><br><span class="line">                                          &#125;,</span><br><span class="line">                                        ),</span><br><span class="line">                                      )</span><br><span class="line">                                    ],</span><br><span class="line">                                  ),</span><br><span class="line">                                ),</span><br><span class="line">                              ],</span><br><span class="line">                            ),</span><br><span class="line">                          );</span><br><span class="line">                        &#125;);</span><br><span class="line">                  &#125;,</span><br><span class="line">                  icon: <span class="keyword">const</span> Icon(Icons.edit),</span><br><span class="line">                ),</span><br><span class="line">              ],</span><br><span class="line">            ),</span><br><span class="line">          );</span><br><span class="line">        &#125;,</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">        child: <span class="keyword">const</span> Icon(Icons.add),</span><br><span class="line">        onPressed: () &#123;</span><br><span class="line">          showDialog(</span><br><span class="line">              context: context,</span><br><span class="line">              builder: (BuildContext context) &#123;</span><br><span class="line">                <span class="keyword">return</span> AlertDialog(</span><br><span class="line">                  content: Stack(</span><br><span class="line">                    clipBehavior: Clip.none,</span><br><span class="line">                    children: &lt;Widget&gt;[</span><br><span class="line">                      Positioned(</span><br><span class="line">                        right: <span class="number">-40.0</span>,</span><br><span class="line">                        top: <span class="number">-40.0</span>,</span><br><span class="line">                        child: InkResponse(</span><br><span class="line">                          onTap: () &#123;</span><br><span class="line">                            Navigator.of(context).pop();</span><br><span class="line">                          &#125;,</span><br><span class="line">                          child: <span class="keyword">const</span> CircleAvatar(</span><br><span class="line">                            child: Icon(Icons.close),</span><br><span class="line">                            backgroundColor: Colors.red,</span><br><span class="line">                          ),</span><br><span class="line">                        ),</span><br><span class="line">                      ),</span><br><span class="line">                      Form(</span><br><span class="line">                        key: _formKey,</span><br><span class="line">                        child: Column(</span><br><span class="line">                          mainAxisSize: MainAxisSize.min,</span><br><span class="line">                          children: &lt;Widget&gt;[</span><br><span class="line">                            <span class="keyword">const</span> Text(<span class="string">&#x27;Add Post&#x27;</span>),</span><br><span class="line">                            Padding(</span><br><span class="line">                              padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">8.0</span>),</span><br><span class="line">                              child: TextFormField(</span><br><span class="line">                                controller: _titleController,</span><br><span class="line">                                decoration: <span class="keyword">const</span> InputDecoration(</span><br><span class="line">                                  labelText: <span class="string">&quot;title&quot;</span>,</span><br><span class="line">                                ),</span><br><span class="line">                                onSaved: (value) &#123;</span><br><span class="line">                                  model.title = value;</span><br><span class="line">                                &#125;,</span><br><span class="line">                              ),</span><br><span class="line">                            ),</span><br><span class="line">                            Padding(</span><br><span class="line">                              padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">8.0</span>),</span><br><span class="line">                              child: TextFormField(</span><br><span class="line">                                controller: _contentController,</span><br><span class="line">                                decoration: <span class="keyword">const</span> InputDecoration(</span><br><span class="line">                                  labelText: <span class="string">&quot;content&quot;</span>,</span><br><span class="line">                                ),</span><br><span class="line">                                onSaved: (value) &#123;</span><br><span class="line">                                  model.body = value;</span><br><span class="line">                                &#125;,</span><br><span class="line">                              ),</span><br><span class="line">                            ),</span><br><span class="line">                            Padding(</span><br><span class="line">                              padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">8.0</span>),</span><br><span class="line">                              child: ElevatedButton(</span><br><span class="line">                                child: <span class="keyword">const</span> Text(<span class="string">&quot;Add&quot;</span>),</span><br><span class="line">                                onPressed: () &#123;</span><br><span class="line">                                  <span class="keyword">if</span> (_formKey.currentState!.validate()) &#123;</span><br><span class="line">                                    _formKey.currentState!.save();</span><br><span class="line">                                    model.userId = <span class="number">1</span>;</span><br><span class="line">                                    post.create(model).then(</span><br><span class="line">                                      (value) &#123;</span><br><span class="line">                                        setState(() &#123;</span><br><span class="line">                                          _posts.add(value);</span><br><span class="line">                                        &#125;);</span><br><span class="line">                                      &#125;,</span><br><span class="line">                                    );</span><br><span class="line">                                    Navigator.of(context).pop();</span><br><span class="line">                                  &#125;</span><br><span class="line">                                &#125;,</span><br><span class="line">                              ),</span><br><span class="line">                            )</span><br><span class="line">                          ],</span><br><span class="line">                        ),</span><br><span class="line">                      ),</span><br><span class="line">                    ],</span><br><span class="line">                  ),</span><br><span class="line">                );</span><br><span class="line">              &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>post_detail_screen.dart:</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter_restful/core/models/models.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostDetailScreen</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> PostModel post;</span><br><span class="line">  <span class="keyword">const</span> PostDetailScreen(&#123;</span><br><span class="line">    Key? key,</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.post,</span><br><span class="line">  &#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _PostDetailScreenState createState() =&gt; _PostDetailScreenState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_PostDetailScreenState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">PostDetailScreen</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(widget.post.title ?? <span class="string">&#x27;&#x27;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Column(</span><br><span class="line">        children: [</span><br><span class="line">          Text(widget.post.body ?? <span class="string">&#x27;&#x27;</span>),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<p>main.dart:</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;ui/home_screen.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(<span class="keyword">const</span> MyApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyApp(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// This widget is the root of your application.</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;Flutter Demo&#x27;</span>,</span><br><span class="line">      theme: ThemeData(</span><br><span class="line">        primarySwatch: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">      home: <span class="keyword">const</span> HomeScreen(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><p><img data-src="/2021/flutter/6e0c59bbcd74/app-test.gif" alt="test restful api gif"></p>
]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
        <tag>restful</tag>
      </tags>
  </entry>
</search>
